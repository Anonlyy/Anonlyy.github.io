{"title":"JavaScript的深拷贝与浅拷贝","uid":"4a5351e61e8e71cf89704b131251d4a8","slug":"深拷贝与浅拷贝","date":"2017-12-25T02:49:36.000Z","updated":"2022-03-30T02:35:15.677Z","comments":true,"path":"api/articles/深拷贝与浅拷贝.json","keywords":null,"cover":"https://image.xposean.top/blogImage/0013.png","content":"<p>在掌握深浅拷贝前,我们要知道,<code>JavaScript</code>的变量可以分为以下两种类型：</p>\n<ul>\n<li>基本类型<ul>\n<li>undefined</li>\n<li>null</li>\n<li>number</li>\n<li>string</li>\n<li>boolean</li>\n<li>symbol</li>\n</ul>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>基本变量是直接按值存放的，存放在栈内存中的简单数据段，可以直接访问。</p></blockquote>\n<ul>\n<li>引用类型 Object、Function、Array</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>存放在堆内存中的对象，变量保存的是一个<strong>指针</strong>，这个指针指向另一个位置。当需要访问引用类型（如对象，数组等）的值时，首先从栈内存中获得该对象的地址指针，然后再从堆内存中取得所需的数据。</p></blockquote>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><strong>浅拷贝(shallowCopy)</strong>:<br>对于字符串类型，浅拷贝是对值的复制，对于对象来说，浅拷贝是对对象地址的复制，并不会开辟新的内存地址，也就是复制的结果是两个对象指向同一个地址，修改其中一个对象的属性，则另一个对象的属性也会改变;</p>\n<p><strong>深拷贝(deepCopy)</strong>:<br>而深拷贝则是开辟新的内存地址，将原对象的各个属性逐个复制进去，两个对象对应两个不同的地址，修改一个对象的属性，不会改变另一个对象的属性。</p>\n<h2 id=\"深浅拷贝的实现\"><a href=\"#深浅拷贝的实现\" class=\"headerlink\" title=\"深浅拷贝的实现\"></a>深浅拷贝的实现</h2><h3 id=\"实现浅拷贝\"><a href=\"#实现浅拷贝\" class=\"headerlink\" title=\"实现浅拷贝\"></a>实现浅拷贝</h3><h4 id=\"1-Object-assign\"><a href=\"#1-Object-assign\" class=\"headerlink\" title=\"1.Object.assign\"></a>1.Object.assign</h4><p>Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象,这也是实现浅拷贝常用的方法之一.</p>\n<pre><code>let obj1 = &#123; a: 0 , b: &#123; c: 0&#125;&#125;;\nlet obj2 = Object.assign(&#123;&#125;, obj1);\nconsole.log(JSON.stringify(obj2)); // &#123; a: 0, b: &#123; c: 0&#125;&#125;\n</code></pre>\n<h4 id=\"2-遍历对象属性赋值\"><a href=\"#2-遍历对象属性赋值\" class=\"headerlink\" title=\"2.遍历对象属性赋值\"></a>2.遍历对象属性赋值</h4><p>之前一直有一个错误实现深拷贝的想法，就是遍历一个对象的Key-Value对并一一复制给另一个对象便可以实现深拷贝。</p>\n<p>但是是错误的，这个是浅拷贝(shallowCopy)</p>\n<p>原因很简单，当Kry-Value对里value是Object的时候，复制过去便仍然是复制引用。</p>\n<pre><code>let obj = &#123;\n    a: 1,\n    b:&#123;\n        c: 2,\n        d: 3\n    &#125;\n&#125;\n\nlet obj2 = &#123;&#125;\n\nfor(let item of Object.keys(obj))&#123;\n    obj2[item] = obj[item]\n&#125;\n\nobj2.b.d = 2; \n\nobj.b.d // 此时obj.b.d 变成了2,所以是浅拷贝\n</code></pre>\n<hr>\n<h3 id=\"实现深拷贝\"><a href=\"#实现深拷贝\" class=\"headerlink\" title=\"实现深拷贝\"></a>实现深拷贝</h3><h4 id=\"1-JSON对象的parse和stringify-最简单的\"><a href=\"#1-JSON对象的parse和stringify-最简单的\" class=\"headerlink\" title=\"1.JSON对象的parse和stringify(最简单的)\"></a>1.JSON对象的parse和stringify(最简单的)</h4><pre><code>let obj1 = &#123; a: 0 , b: &#123; c: 0&#125;&#125;;\n\nlet obj2 = JSON.parse(JSON.stringify(obj1));\n\nobj2.b.c = 3;\nconsole.log(obj2.b.c); // &#123; a: 0 , b: &#123; c: 3&#125;&#125;;\n\nconsole.log(obj1.b.c); // &#123; a: 0 , b: &#123; c: 0&#125;&#125;;\n</code></pre>\n<p>该方法思路就是将一个对象转成json字符串，然后又将字符串转回对象。<br>能够处理<code>JSON</code>格式能表示的所有数据类型，但是无法拷贝对象里面的函数，正则表达式等，而且会丧失所有的<code>constructor</code>，也就是说，将是破坏整条<code>prototype</code>链。</p>\n<h4 id=\"2-JQuery的extend\"><a href=\"#2-JQuery的extend\" class=\"headerlink\" title=\"2.JQuery的extend()\"></a>2.JQuery的extend()</h4><p>我们在 jQuery 中可以通过添加一个参数来实现递归extend。调用<code>$.extend(true, &#123;&#125;, ...)</code>就可以实现深复制啦，参考下面的例子：</p>\n<pre><code>var x = &#123;\n    a: 1,\n    b: &#123; f: &#123; g: 1 &#125; &#125;,\n    c: [ 1, 2, 3 ]\n&#125;;\n\nvar y = $.extend(&#123;&#125;, x),          //shallow copy\n    z = $.extend(true, &#123;&#125;, x);    //deep copy\n\ny.b.f === x.b.f       // true\nz.b.f === x.b.f       // false\n</code></pre>\n<h4 id=\"3-Lodash的深拷贝\"><a href=\"#3-Lodash的深拷贝\" class=\"headerlink\" title=\"3.Lodash的深拷贝\"></a>3.Lodash的深拷贝</h4><p><code>Lodash</code> 是一套基于<code>JavaScript</code>的工具库，它内部封装了诸多对字符串、数组、对象等常见数据类型的处理函数，其中部分是目前 <code>ECMAScript</code> 尚未制定的规范，但同时被业界所认可的辅助函数。目前每天使用 <code>npm</code> 安装 <code>Lodash</code> 的数量在百万级以上，这在一定程度上证明了其代码的健壮性，值得我们在项目中一试。<br><code>jQuery</code>无法深拷贝<code>JSON</code>对象以外的对象,但<code>Lodash</code>在源代码已经兼顾到许多ES6引入的新标准对象,所以在可用性上,比其他第三方库文件反馈更好,可用性更强.</p>\n<pre><code>var objects = [&#123; &#39;a&#39;: 1 &#125;, &#123; &#39;b&#39;: 2 &#125;];\n \nvar deep = _.cloneDeep(objects);\nconsole.log(deep[0] === objects[0]);\n// =&gt; false\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>基本类型变量存贮在栈内存区,存放在堆内存中的对象，变量保存的是一个指针。</li>\n<li>直接遍历对象一一复制是浅拷贝(shallowCopy)</li>\n<li>深拷贝即是在堆内存区拷贝出一个对象来。</li>\n<li>深拷贝当然更占内存，请一定要针对不同的场景做不同的拷贝处理。</li>\n</ol>\n","text":"在掌握深浅拷贝前,我们要知道,JavaScript的变量可以分为以下两种类型： 基本类型 undefined null number string boolean symbol 基本变量是直接按值存放的，存放在栈内存中的简单数据段，可以直接访问。 引用类型 Object、Func...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">深浅拷贝的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%B5%85%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">实现浅拷贝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-Object-assign\"><span class=\"toc-text\">1.Object.assign</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">2.遍历对象属性赋值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">实现深拷贝</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-JSON%E5%AF%B9%E8%B1%A1%E7%9A%84parse%E5%92%8Cstringify-%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84\"><span class=\"toc-text\">1.JSON对象的parse和stringify(最简单的)</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-JQuery%E7%9A%84extend\"><span class=\"toc-text\">2.JQuery的extend()</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-Lodash%E7%9A%84%E6%B7%B1%E6%8B%B7%E8%B4%9D\"><span class=\"toc-text\">3.Lodash的深拷贝</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}},"mapped":true,"prev_post":{"title":"深入研究微信小程序的wepy框架","uid":"406a9d044b09e92171b60ddb7efe0ee1","slug":"深入研究微信小程序的wepy框架","date":"2017-12-30T05:24:28.000Z","updated":"2022-03-30T02:35:15.676Z","comments":true,"path":"api/articles/深入研究微信小程序的wepy框架.json","keywords":null,"cover":[],"text":"小程序现状微信小程序自发布到如今已经有半年多的时间了,凭借微信平台的强大影响力，越来越多企业加入小程序开发。 小程序于传统web页和APP比相比，有以下优势： 小程序拥有更多的能力，包括定位、录音、文件、媒体、各种硬件能力等，想象空间更大 运行在微信内部，体验更接近APP 在过度...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"小程序","slug":"小程序","count":1,"path":"api/categories/小程序.json"}],"tags":[{"name":"小程序","slug":"小程序","count":1,"path":"api/tags/小程序.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}},"next_post":{"title":"谈谈现在的移动端页面调试","uid":"82ca99d72366ad356dc36bff3d6367ca","slug":"谈谈现在的移动端页面调试","date":"2017-12-19T03:21:26.000Z","updated":"2022-03-30T02:35:15.681Z","comments":true,"path":"api/articles/谈谈现在的移动端页面调试.json","keywords":null,"cover":[],"text":"通常我们在日常开发手机版网页的时候，都是通过PC浏览器的移动设备模式来模拟移动设备访问网页,但总会出现以下的问题: 开发时，在自己电脑上运行得好好的，在真机上打开就挂了，但是手机上又看不到错误的log信息； 作为开发者，我们的诉求很简单：有没有快捷的工具可以让我们在真机运行网页的...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}}}