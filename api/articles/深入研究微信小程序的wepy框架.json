{"title":"深入研究微信小程序的wepy框架","uid":"406a9d044b09e92171b60ddb7efe0ee1","slug":"深入研究微信小程序的wepy框架","date":"2017-12-30T05:24:28.000Z","updated":"2022-03-30T02:35:15.676Z","comments":true,"path":"api/articles/深入研究微信小程序的wepy框架.json","keywords":null,"cover":[],"content":"<h2 id=\"小程序现状\"><a href=\"#小程序现状\" class=\"headerlink\" title=\"小程序现状\"></a>小程序现状</h2><p>微信小程序自发布到如今已经有半年多的时间了,凭借微信平台的强大影响力，越来越多企业加入小程序开发。 小程序于传统web页和APP比相比，有以下优势： </p>\n<ol>\n<li>小程序拥有更多的能力，包括定位、录音、文件、媒体、各种硬件能力等，想象空间更大 </li>\n<li>运行在微信内部，体验更接近APP</li>\n<li>在过度竞争的互联网行业中，获取一个有效APP用户的成本已经非常高了，小程序相比APP更加轻量、即用即走， 更容易获取用户</li>\n</ol>\n<h2 id=\"小程序问题\"><a href=\"#小程序问题\" class=\"headerlink\" title=\"小程序问题\"></a>小程序问题</h2><p>从<strong>开发角度</strong>来讲，，但同时也带来很多不便： </p>\n<p>1、虽然小程序官方封装了很多常用组件给开发带来很多便利性,但在自定义组件复用性上十分薄弱,仅仅支持模板片段层面的复用,业务代码与交互事件都不支持。</p>\n<p>2、小程序不支持SASS、LESS等预编译器,而小程序的<code>WXSS</code>语法在学习成本和功能性比不上我们日常开发的预编译器.</p>\n<p>3、小程序支持部分ES6语法,不支持ES7、ES8的新语法.</p>\n<p>4、在开发模式上,如果是<code>Angular</code>、<code>VUE</code>的开发者,在适应小程序的开发模式上,还需要时间适应.</p>\n<h2 id=\"Wepy框架\"><a href=\"#Wepy框架\" class=\"headerlink\" title=\"Wepy框架\"></a>Wepy框架</h2><p>基于小程序存在的问题,腾讯的官方团队推出了<code>wepy</code>框架，该框架是腾讯内部基于小程序的开发框架，设计思路基本参考<strong>VUE</strong>，开发模式和编码风格上80%以上接近VUE，开发者可以以很小的成本从VUE开发切换成小程序开发。<br>WePY 是一款让小程序真正支持组件化开发的框架，通过预编译的手段让开发者可以选择自己喜欢的开发风格去开发小程序。框架的细节优化，<code>Promise</code>，<code>Async</code>、<code>await</code>的引入都是为了能让开发小程序项目变得更加简单，高效。</p>\n<h3 id=\"Wepy框架的优势\"><a href=\"#Wepy框架的优势\" class=\"headerlink\" title=\"Wepy框架的优势\"></a>Wepy框架的优势</h3><p>1.<strong>新增属性,并针对原生API进行优化</strong><br>对现在API进行promise处理，同时修复一些现有API的缺陷，比如：<code>wx.request</code>并发问题等。</p>\n<pre><code>// 官方\nwx.request(&#123;\n    url: &#39;xxx&#39;,\n    success: function (data) &#123;\n        console.log(data);\n    &#125;\n&#125;);\n\n// wepy 使用方式\n// request 接口从只接收Object变为可接收String\nwx.request(&#39;xxxx&#39;).then((d) =&gt; console.log(d));\n</code></pre>\n<p>在同时并发10个request请求测试时：<br>不使用wepy:<br><img src=\"https://segmentfault.com/image?src=https://cloud.githubusercontent.com/assets/2182004/20554651/5185f740-b198-11e6-88f8-45e359090dc3.png&objectId=1190000007580866&token=fd4bd72096cf29af2f7aa954056f459a\"><br><img src=\"https://segmentfault.com/image?src=https://cloud.githubusercontent.com/assets/2182004/20554886/c30e802a-b199-11e6-927d-08cd4e5ed0b0.png&objectId=1190000007580866&token=4cfef2840665f05dc9359b979eb2bb74\"></p>\n<p>使用wepy后：<br><img src=\"https://segmentfault.com/image?src=https://cloud.githubusercontent.com/assets/2182004/20554663/65704c2e-b198-11e6-8277-abb77e0c7b3e.png&objectId=1190000007580866&token=eb5231dacbbab14ae42efeea2c4fee82\"></p>\n<h3 id=\"新增属性-vue移植\"><a href=\"#新增属性-vue移植\" class=\"headerlink\" title=\"新增属性(vue移植)\"></a>新增属性(vue移植)</h3><ul>\n<li>computed 计算属性</li>\n<li>watcher 监听器</li>\n<li>props 传值</li>\n<li>slot 组件内容分发插槽</li>\n</ul>\n<hr>\n<p>2.<strong>单文件模式</strong><br>使得目录结构更加清晰 小程序官方目录结构要求app必须有三个文件<code>app.json</code>，<code>app.js</code>，<code>app.wxss</code>，页面有4个文件 <code>index.json</code>，<code>index.js</code>，<code>index.wxml</code>，<code>index.wxss</code>。而且文件必须同名。 所以使用wepy开发前后开发目录对比如下：</p>\n<p>官方DEMO：</p>\n<pre><code>project\n\n├── pages\n\n|   ├── index\n\n|   |   ├── index.json  index 页面配置\n\n|   |   ├── index.js    index 页面逻辑\n\n|   |   ├── index.wxml  index 页面结构\n\n|   |   └── index.wxss  index 页面样式表\n\n|   └── log\n\n|       ├── log.json    log 页面配置\n\n|       ├── log.wxml    log 页面逻辑\n\n|       ├── log.js      log 页面结构\n\n|       └── log.wxss    log 页面样式表\n\n├── app.js              小程序逻辑\n\n├── app.json            小程序公共设置\n\n└── app.wxss            小程序公共样式表\n</code></pre>\n<p>使用wepy框架后目录结构：</p>\n<pre><code>project\n\n└── src\n\n    ├── pages\n\n    |   ├── index.wpy    index 页面配置、结构、样式、逻辑\n\n    |   └── log.wpy      log 页面配置、结构、样式、逻辑\n\n    └──app.wpy           小程序配置项（全局样式配置、声明钩子等）\n</code></pre>\n<p>3.<strong>真正的组件化开发</strong><br> 小程序虽然有 标签可以实现组件复用，但仅限于模板片段层面的复用，业务代码与交互事件 仍需在页面处理。无法实现组件化的松耦合与复用的效果.<br>但<strong>wepy</strong>能够真正实现组件化开发,这也是使用它的最大优势之一,而且<code>wepy</code>在使用上更靠近<code>vue</code>框架的书写风格,使用起来更得心应手。</p>\n<pre><code>/ index.wpy\n\n&lt;template&gt;\n    &lt;view&gt;\n        &lt;panel&gt;\n            &lt;h1 slot=&quot;title&quot;&gt;&lt;/h1&gt;\n        &lt;/panel&gt;\n        &lt;counter1 :num=&quot;myNum&quot;&gt;&lt;/counter1&gt;\n        &lt;counter2 :num.sync=&quot;syncNum&quot;&gt;&lt;/counter2&gt;\n        &lt;list :item=&quot;items&quot;&gt;&lt;/list&gt;\n    &lt;/view&gt;\n&lt;/template&gt;\n&lt;script&gt;\n\nimport wepy from &#39;wepy&#39;;\n\nimport List from &#39;../components/list&#39;;\n\nimport Panel from &#39;../components/panel&#39;;\n\nimport Counter from &#39;../components/counter&#39;;\n\n\nexport default class Index extends wepy.page &#123;\n    config = &#123;\n        &quot;navigationBarTitleText&quot;: &quot;test&quot;\n    &#125;;\n\n    components = &#123;\n        panel: Panel,\n        counter1: Counter,\n        counter2: Counter,\n        list: List\n    &#125;;\n\n    data = &#123;\n        myNum: 50,\n        syncNum: 100,\n        items: [1, 2, 3, 4]\n    &#125;\n&#125;\n\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"组件通信与交互\"><a href=\"#组件通信与交互\" class=\"headerlink\" title=\"组件通信与交互\"></a>组件通信与交互</h3><p><code>wepy.component</code>基类提供三个方法<code>$broadcast</code>，<code>$emit</code>，<code>$invoke</code>，因此任一页面或任一组件都可以调用上述三种方法实现通信与交互，如：<br>1.<strong>$broadcast</strong><br>$broadcast事件是由父组件发起，所有子组件都会收到此广播事件，除非事件被手动取消。事件广播的顺序为广度优先搜索顺序，如上图，如果Page_Index发起一个$broadcast事件，那么接收到事件的先后顺序为：A, B, C, D, E, F, G, H。如下图：</p>\n<p><img src=\"https://segmentfault.com/image?src=https://cloud.githubusercontent.com/assets/2182004/20554688/800089e6-b198-11e6-84c5-352d2d0e2f7e.png&objectId=1190000007580866&token=61f8192d48b7640ebef69ed8700726bf\"></p>\n<p>2.<strong>$emit</strong><br><code>$emit</code>与<code>$broadcast</code>正好相反，事件发起组件的父组件会依次接收到<code>$emit</code>事件，如上图，如果E发起一个$emit事件，那么接收到事件的先后顺序为：A, Page_Index。如下图：<br><img src=\"https://segmentfault.com/image?src=https://cloud.githubusercontent.com/assets/2182004/20554704/9997932c-b198-11e6-9840-3edae2194f47.png&objectId=1190000007580866&token=707913104beb5c2ee310c64f22e37140\"></p>\n<p>3.<strong>$invoke</strong><br>$invoke是一个组件对另一个组件的直接调用，通过传入的组件路径找到相应组件，然后再调用其方法。</p>\n<p>如果想在<code>Page_Index</code>中调用组件A的某个方法：</p>\n<pre><code>this.$invoke(&#39;ComA&#39;, &#39;someMethod&#39;, &#39;someArgs&#39;);\n</code></pre>\n<p>如果想在组件A中调用组件G的某个方法：</p>\n<pre><code>this.$invoke(&#39;./../ComB/ComG&#39;, &#39;someMethod&#39;, &#39;someArgs&#39;);\n</code></pre>\n<hr>\n<p>4.<strong>支持加载外部NPM包</strong><br>小程序较大的缺陷是不支持<code>NPM</code>包，导致无法直接使用大量优秀的开源内容，<code>wepy</code>在编译过程当中，会递归 遍历代码中的<code>require</code>然后将对应依赖文件从<code>node_modules</code>当中拷贝出来，并且修改<code>require</code>为相对路径， 从而实现对外部NPM包的支持。</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/2182004/20554645/482b0f64-b198-11e6-8d4e-70c92326004f.png\"></p>\n<p>5.默认使用<code>babel</code>编译，支持ES6&#x2F;7的一些新特性，如promise，async&#x2F;await等等</p>\n<p>6.wepy支持使用<code>LESS</code>、<code>SASS</code>、<code>Styus</code>；</p>\n<h3 id=\"wepy编译原理\"><a href=\"#wepy编译原理\" class=\"headerlink\" title=\"wepy编译原理\"></a>wepy编译原理</h3><p><img src=\"https://segmentfault.com/image?src=https://cloud.githubusercontent.com/assets/2182004/20554671/70a797a0-b198-11e6-8355-b7c234713d0c.png&objectId=1190000007580866&token=a4993b9e79afe4e9af0e6866dfebdab9\"></p>\n<h3 id=\"weby快速起步\"><a href=\"#weby快速起步\" class=\"headerlink\" title=\"weby快速起步\"></a>weby快速起步</h3><p>weby配备了专门的构建工具脚手架<code>wepy-cli</code>协助开发,帮助快速起步</p>\n<p>1.安装</p>\n<pre><code>npm install wepy-cli -g\n</code></pre>\n<p>2.脚手架</p>\n<pre><code>wepy new myproject\n</code></pre>\n<p>3.切换至项目目录</p>\n<pre><code>cd myproject\n</code></pre>\n<p>4.实时编译</p>\n<pre><code>wepy build --watch\n</code></pre>\n<p><code>wepy</code>作为一款优秀的微信小程序框架，可以帮我们大幅提高开发效率，在为数不多的小程序框架中一枝独秀，希望有更多的团队选择wepy。</p>\n","text":"小程序现状微信小程序自发布到如今已经有半年多的时间了,凭借微信平台的强大影响力，越来越多企业加入小程序开发。 小程序于传统web页和APP比相比，有以下优势： 小程序拥有更多的能力，包括定位、录音、文件、媒体、各种硬件能力等，想象空间更大 运行在微信内部，体验更接近APP 在过度...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"小程序","slug":"小程序","count":1,"path":"api/categories/小程序.json"}],"tags":[{"name":"小程序","slug":"小程序","count":1,"path":"api/tags/小程序.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%8E%B0%E7%8A%B6\"><span class=\"toc-text\">小程序现状</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">小程序问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Wepy%E6%A1%86%E6%9E%B6\"><span class=\"toc-text\">Wepy框架</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Wepy%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">Wepy框架的优势</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%A2%9E%E5%B1%9E%E6%80%A7-vue%E7%A7%BB%E6%A4%8D\"><span class=\"toc-text\">新增属性(vue移植)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E4%B8%8E%E4%BA%A4%E4%BA%92\"><span class=\"toc-text\">组件通信与交互</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#wepy%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">wepy编译原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#weby%E5%BF%AB%E9%80%9F%E8%B5%B7%E6%AD%A5\"><span class=\"toc-text\">weby快速起步</span></a></li></ol></li></ol>","author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}},"mapped":true,"prev_post":{"title":"浅谈前后端开发中的MVVM开发模式","uid":"08c4771ec9e4c3675f85bffbb0600e94","slug":"浅谈前后端开发中的MVVM开发模式","date":"2018-01-17T02:00:21.000Z","updated":"2022-03-30T02:35:15.675Z","comments":true,"path":"api/articles/浅谈前后端开发中的MVVM开发模式.json","keywords":null,"cover":"https://image.xposean.top/blogImage/0012.png","text":"之前在我的博客也写过关于MVVM模式的简单介绍,但不够详细,也因为对 MVVM 模式一直只是模模糊糊的认识，现在就给大家讲一下详细讲下MVVM模式为何物. 概述MVVM 源自于经典的 Model–View–Controller（MVC）模式（期间还演化出了 Model-View-...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}},"next_post":{"title":"JavaScript的深拷贝与浅拷贝","uid":"4a5351e61e8e71cf89704b131251d4a8","slug":"深拷贝与浅拷贝","date":"2017-12-25T02:49:36.000Z","updated":"2022-03-30T02:35:15.677Z","comments":true,"path":"api/articles/深拷贝与浅拷贝.json","keywords":null,"cover":"https://image.xposean.top/blogImage/0013.png","text":"在掌握深浅拷贝前,我们要知道,JavaScript的变量可以分为以下两种类型： 基本类型 undefined null number string boolean symbol 基本变量是直接按值存放的，存放在栈内存中的简单数据段，可以直接访问。 引用类型 Object、Func...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/tags/JavaScript.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}}}