{"title":"JavaScript的高级运用之节流与防抖","uid":"7b6c80c82769c35e7a6f32b608c38d88","slug":"JavaScript的高级运用节流与防抖","date":"2018-05-17T01:33:34.000Z","updated":"2022-03-30T02:35:15.665Z","comments":true,"path":"api/articles/JavaScript的高级运用节流与防抖.json","keywords":null,"cover":"https://image.xposean.top/blogImage/0021.png","content":"<h2 id=\"概念与目的\"><a href=\"#概念与目的\" class=\"headerlink\" title=\"概念与目的\"></a>概念与目的</h2><p>首先还是得先来讲讲概念,<strong>节流</strong>和<strong>防抖</strong>的目的都十分的简单,就是为了性能优化而出现的,目的是为了解决一些短时间内连续执行导致性能不佳或者内存消耗巨大的情况。<br>这类事件有:<code>scroll</code> <code>keyup</code> <code>mousemove</code> <code>resize</code>事件等，短时间内会不断的触发，在性能上消耗是非常大的，尤其是一些改变DOM结构的操作；<br>例如我们的<code>scroll</code>事件,当使用触控板，滚动滚轮，或者拖拽滚动条的时候，一秒就可以触发 30 次事件。经测试，在移动设备上轻轻滚动一下，一秒可以触发 100 次之多。这么高的执行频率是我们无法忍受的。<br>所以,在这些高频率触发的事件中,<code>节流</code>[throttle]与<code>防抖</code>[debounce]十分有必要了,它们非常相似，都是让上述这类事件在规定的事件从不断的去触发更改成为规定的时间内触发多少次；</p>\n<h2 id=\"节流-throttle\"><a href=\"#节流-throttle\" class=\"headerlink\" title=\"节流[throttle]\"></a>节流[throttle]</h2><p>我们的所谓节流,就是需要事件按照我们规定的时间间隔内执行,换成函数来说，使用setTimeout方法，给定两个时间，后面的时间减去前面的时间，得到时间间隔,这个时间到达我们给定的时间就去触发一次这个事件.</p>\n<p>来看看我们的代码,以<code>scroll</code>:</p>\n<pre><code>/** 先给定DOM结构;**/\n&lt;div class=&quot;scroll-box&quot;&gt;\n    &lt;div class=&quot;scroll-item&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n/**主要看js,为了简单我用JQ去写了**/\n&lt;script&gt;\n    $(function()&#123;\n        var scrollBox = $(&#39;.scroll-box&#39;);\n        //调用throttle函数，传入相应的方法和规定的时间;\n        var thro = throttle(throFun,300);\n        //触发事件;\n        scrollBox.on(&#39;scroll&#39; , function()&#123;\n            //调用执行函数;\n            thro();\n        &#125;)\n\n        // 节流函数;    \n        function throttle(method,time)&#123;\n            var timer = null;\n            var startTime = new Date();\n            return function()&#123;\n                var context = this;\n                var endTime = new Date();\n                var resTime = endTime - startTime;\n                //判断大于等于我们给的时间采取执行函数;\n                if(resTime &gt;= time)&#123;\n                    method.call(context);//success\n                    //执行完函数之后重置初始时间，等于最后一次触发的时间\n                    startTime = endTime;\n                &#125;\n            &#125;\n        &#125;\n        //执行函数\n        function throFun()&#123;\n            console.log(&#39;success&#39;);\n        &#125;\n    &#125;)\n&lt;/script&gt;\n</code></pre>\n<p>通过函数,我们其实也清晰的明白了,节流的原理,首先给给定一个间隔时间值,然后我们的节流函数就会通过比对上一次的时间和当前时间,超过或者等于这个时间才触发,反之,则不执行.<br>以上的代码就能实现,300ms内触发一次。</p>\n<h2 id=\"防抖-debounce\"><a href=\"#防抖-debounce\" class=\"headerlink\" title=\"防抖[debounce]\"></a>防抖[debounce]</h2><p>代码之前，我们先清楚一下防抖的概念，不知道大家有没有做过电脑端两边悬浮广告窗口的这么一个东西，当我们拖动滚动条的时候，两边的广告窗口会因为滚动条的拖动，而不断的尝试着去居于中间，然后你就会看到这两个窗口，不停的抖啊抖；<br>一般这种就叫抖动了，我们要做的就是防止这种抖动，称为防抖[debounce]；<br>比如开发技巧中的坐公交，就是一定时间内，如果有人陆续刷卡上车，司机就不会开车。只有别人没刷卡了，司机才开车。<br>那这里防抖思想就是当我们拖动完成之后，两边的窗口位置再重新去计算，这样，就会显得很平滑，看着很舒服了，最主要的操作DOM结构的次数就大大减少了；<br>优化了页面性能，降低了内存消耗，不然你像IE这种比较老点版本的浏览器，说不定就直接给你蹦了<br>用书面一点的说法就是，在某个事件没有结束之前，函数不会执行，当结束之后，我们给定延时时间，然他在给定的延时时间之后再去执行这个函数，这就是防抖函数；<br>来看代码：</p>\n<pre><code>/** 先给定DOM结构;**/\n&lt;div class=&quot;scroll-box&quot;&gt;\n    &lt;div class=&quot;scroll-item&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n/**主要看js,为了简单我用JQ去写了**/\n&lt;script&gt;\n    $(function()&#123;\n        var scrollBox = $(&#39;.scroll-box&#39;);\n        //调用throttle函数，传入相应的方法和规定的时间;\n        var debo = debounce(debounceFun,300);\n        //触发事件;\n        scrollBox.on(&#39;scroll&#39; , function()&#123;\n            //调用执行函数;\n            debo();\n        &#125;)\n\n        // 防抖函数;    \n        function debounce(method,time)&#123;\n            var timer = null ;\n            return function()&#123;\n                var context = this;\n                //在函数执行的时候先清除timer定时器;\n                clearTimeout(timer);\n                timer = setTimeout(function()&#123;\n                    method.call(context);  //success\n                &#125;,time);\n            &#125;\n        &#125;\n        function debounceFun()&#123;\n            console.log(&#39;success&#39;);\n        &#125;\n    &#125;)\n&lt;/script&gt;\n</code></pre>\n<p>思路就是在函数执行之前，我们先清除定时器，如果函数一直执行，就会不断的去清除定时器中的方法，直到我们操作结束之后，函数才会执行；</p>\n<p>其实书写的方式有很多，主要还是思路的问题，大家写的多了，自然就知道了；</p>\n","text":"概念与目的首先还是得先来讲讲概念,节流和防抖的目的都十分的简单,就是为了性能优化而出现的,目的是为了解决一些短时间内连续执行导致性能不佳或者内存消耗巨大的情况。这类事件有:scroll keyup mousemove resize事件等，短时间内会不断的触发，在性能上消耗是非常大...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5%E4%B8%8E%E7%9B%AE%E7%9A%84\"><span class=\"toc-text\">概念与目的</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8A%82%E6%B5%81-throttle\"><span class=\"toc-text\">节流[throttle]</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%98%B2%E6%8A%96-debounce\"><span class=\"toc-text\">防抖[debounce]</span></a></li></ol>","author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}},"mapped":true,"prev_post":{"title":"前端性能优化之图片","uid":"2d7c0bd2df6d999d4495f99378b1f4d4","slug":"前端性能优化之图片","date":"2018-10-27T02:11:26.000Z","updated":"2022-03-30T02:35:15.671Z","comments":true,"path":"api/articles/前端性能优化之图片.json","keywords":null,"cover":"https://image.xposean.top/blogImage/0010.png","text":"前端优化中图片优化必要性在我们前端优化的种种方案中,包括js、html、css文件的打包压缩合并到极致,我们节省的空间至多也就是几十K的大小,但是在图片领域能够优化的空间,往往能够达到几百k到几M的范畴,这对于一个页面而言,优化力度可是极大的.所以在前端优化中,图片的优化是至关重...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}},"next_post":{"title":"初探PWA的Service Worker","uid":"5b1e2e9ed1fe26668be4e02b12beafaf","slug":"初探PWA的Service-Worker","date":"2018-04-23T01:48:25.000Z","updated":"2022-03-30T02:35:15.670Z","comments":true,"path":"api/articles/初探PWA的Service-Worker.json","keywords":null,"cover":[],"text":" Progressive Web App, 简称 PWA，是提升 Web App的体验的一种新方法，能给用户原生应用的体验，致力于用前沿的技术开发，让网页使用如同原生App般的体验的一系列方案。 用来自Google Developers的解答Progressive Web App...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}}}