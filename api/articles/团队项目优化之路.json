{"title":"团队项目优化之路","uid":"8c7f3eb97377e5b415daeb0404588f05","slug":"团队项目优化之路","date":"2020-05-09T08:51:32.000Z","updated":"2022-03-30T02:35:15.671Z","comments":true,"path":"api/articles/团队项目优化之路.json","keywords":null,"cover":"https://image.xposean.top/blogImage/0014.png","content":"<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>公司的前端项目是基于<code>Vue</code>技术栈为核心的前端项目,不得不说, 我花了接近将近一个多星期, 才对它有一定的了解, 在不包含引入库和依赖的情况下, 接近 <code>43.3M</code>, <code>src</code>文件下的<code>.vue</code>文件 接近700个, 这么大的项目, 可是让我疑惑的点是, 在优化的方面, 却有很多不足之处。</p>\n<p><img src=\"https://image.xposean.top/20200519150208.png\" alt=\"image-20200519145742791\"></p>\n<p><strong>项目中存在的问题：</strong></p>\n<ol>\n<li>使用 <code>vuex</code>, 但不使用 <code>vuex</code> 的组件化通信,只是将 <code>vuex</code> 作为一个存储全局变量的作用,事实上 <code>vuex</code> 还有很多功能可以用到,例如 <code>action</code> 等,此外 <code>vuex</code> 没有分模块管理,只使用一个 <code>store.js</code> ,在项目功能越发复杂的情况,会导致该文件越发的庞大且难以维护</li>\n<li>样式集中于一个 <code>style</code> 文件,文件庞大难以维护,且极其容易出现样式污染的情况</li>\n<li><code>elementUI</code> 的主题修改, <code>elementUI</code> 官方提供修改主题色的方式,使用现有的样式替换方式会导致一些组件样式使用上很奇怪</li>\n<li><code>API</code>方法使用问题,第一个问题是内部封装的方法是用 <code>mixin</code> 去引入的,这就导致了只有在 <code>vue</code> 文件中才能使用,在一些特定的场景下无法使用,如路由钩子和一些自定义方法,其次是在使用某个请求方法的时候,代码可读性很差。</li>\n<li>开发代码无规范, 预计使用 <code>eslint(standard)</code> 、<code>js</code>命名使用小驼峰</li>\n<li><code>git commit</code>提交无规范, 随意提交</li>\n<li>构建代码时间过长,且 <code>webpack</code> 配置有待优化</li>\n<li>组件封装和代码风格问题</li>\n<li>前端权限路由系统</li>\n</ol>\n<p>以上问题, 在目前最新的项目中已基本完成修复, 这过程其实算是比较漫长的, 因为还要兼顾需求的开发和<code>bug</code>修复, 以及个别改动较大, 需要考虑时机进行整改, 例如代码规范这一项, 改动的范围就很大.</p>\n<p>那么以下就根据一个个修复点进行详解:</p>\n<h3 id=\"1-Vuex-的使用\"><a href=\"#1-Vuex-的使用\" class=\"headerlink\" title=\"1) Vuex 的使用\"></a>1) <code>Vuex</code> 的使用</h3><p>文档首页: <a href=\"https://vuex.vuejs.org/zh/\">https://vuex.vuejs.org/zh/</a></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>Vuex</code> 是一个专为 <code>Vue.js</code> 应用程序开发的 状态管理模式 。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p></blockquote>\n<p>对于中大型项目而言, <code>Vuex</code>的使用是十分有必要性的, 项目一庞大, 势必带来层级关系复杂, 变量繁多的情况, 这个使用<code>vuex</code>能够较大程度的解决一些变量传值和统一管理的问题。</p>\n<p>在 <code>Vuex</code> 有几个核心概念,分别是 <code>state</code> , <code>action</code> , <code>mutation</code> , <code>Module</code> , <code>Getter</code> ,而我们的项目中只用到了 <code>state</code> 和 <code>mutation</code> ,此外因为项目既然已经使用了 <code>vuex</code> , 很多地方还是会出现, 一个变量传三四层组件的情况。</p>\n<p>项目中的 <code>vuex</code> 应分功能模块管理,尽量不耦合关联,项目成员只改动自己功能所属的<code> Vuex</code> 模块代码, 这样, 多层嵌套的组件、兄弟组件间的状态会更好管理维护, 而且对开发者来说，如果你的项目足够复杂，团队的规模也不仅是一个人，那么数据集中处理更利于程序的稳定和维护。</p>\n<p>理想中的 <code>Vuex</code> 文件夹结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">└── store\n   ├── index.js          # 我们组装模块并导出 store 的地方\n   ├── actions.js        # 根级别的 action\n   ├── mutations.js      # 根级别的 mutation\n   ├── getters.js      # 根级别的 getters\n   └── modules\n       ├── network  # 网络模块\n            └── actions.js   # 网络模块的 action\n            └── getters.js   # 网络模块的 getters          \n            └── mutations.js   # 网络模块的 mutation      \n            └── index.js   # 导出网络模块文件    \n       ├── user  # 用户模块\n            └── actions.js   # 用户模块的 action\n            └── getters.js   # 用户模块的 getters          \n            └── mutations.js   # 用户模块的 mutation      \n            └── index.js   # 导出用户模块文件    \n       ....<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>而每次需要修改增加 <code>store</code> 的功能,则可以去对应的功能模块文件夹下新增或修改即可</p>\n<h3 id=\"2-API的调用方式\"><a href=\"#2-API的调用方式\" class=\"headerlink\" title=\"2) API的调用方式\"></a>2) <code>API</code>的调用方式</h3><p>项目中 <code>API</code> 原来的调用方式是使用 <code>Mixin</code> 混入全局来进行使用的,这种方案问题很大。</p>\n<p>先来说缺陷:</p>\n<ol>\n<li>使用局限性,我们都知道<code>mixin</code>是只有在<code>vue</code>文件中才有的功能,那么就会导致封装的<code>API</code>方法只能在我们的<code>vue</code>文件中使用,如果在我们的 <code>vuex</code> 或者 <code>vue-router</code> 中去使用的话,是没办法使用的。</li>\n<li>代码可读性差, 在目前项目中,调用一个请求方法可能是这样的</li>\n</ol>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> xxxApi <span class=\"token keyword\">from</span> <span class=\"token string\">'xxx/models/xxxApi'</span> <span class=\"token comment\">// 1. 引入mixin文件</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token literal-property property\">mixins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>xxxApi<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 2. 引用</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 参数</span>\n<span class=\"token keyword\">let</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> xxx<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> xxxx\n<span class=\"token punctuation\">&#125;</span>\nself<span class=\"token punctuation\">.</span><span class=\"token function\">hostphysicalList</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 3.使用</span>\n<span class=\"token comment\">// 接口返回处理</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p> 如果这个使用在 <code>vue</code>的 <code>method</code> 定义了另一个<code>hostphysicalList</code> 命名相近的方法,这个时候其他成员在阅读代码的时候会比较清楚哪个才是真正的请求方法。</p>\n<ol start=\"3\">\n<li>命名空间容易冲突, <code>api</code>请求方法名很容易和原本自带的方法名重复。</li>\n</ol>\n<p>这种情况下, 势必要对 <code>Api</code>的请求方式和架构做调整.</p>\n<p><strong><code>API</code>目录：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">└── api\n   ├── index.js       # api方法入口文件\n   ├── http.js       # api方法核心文件\n   ├── modules        # api方法文件夹\n        ├── user.js  # 用户模块API方法\n        ├── cluster.js # 集群模块API方法\n        ├── tenant.js # 租户模块API方法<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// `http.js` </span>\n<span class=\"token comment\">// 1. 文件配置好`API`的公共配置并导出, 然后在每个方法中引入使用。</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n<span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">'@/router/routerConfig'</span>\n<span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'@/vuex/store'</span>\n<span class=\"token keyword\">import</span> Message <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/message/'</span> <span class=\"token comment\">// 自定义message提示</span>\n<span class=\"token keyword\">import</span> VueMessageBox <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/message-box/'</span> <span class=\"token comment\">// 自定义confirm提示框</span>\n<span class=\"token keyword\">import</span> NProgress <span class=\"token keyword\">from</span> <span class=\"token string\">'nprogress'</span>\n<span class=\"token keyword\">import</span> sha256 <span class=\"token keyword\">from</span> <span class=\"token string\">'crypto-js/sha256'</span>\n<span class=\"token keyword\">import</span> Base64 <span class=\"token keyword\">from</span> <span class=\"token string\">'crypto-js/enc-base64'</span>\n<span class=\"token comment\">/**\n * 请求失败(非200)后的错误统一处理\n * @param &#123;Number&#125; status 请求失败的状态码\n */</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">errorHandle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">status<span class=\"token punctuation\">,</span> other</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 状态码判断</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'status'</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 404请求不存在</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">404</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'请求不存在！'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> <span class=\"token number\">2000</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">case</span> <span class=\"token number\">500</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'服务端错误！'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> <span class=\"token number\">2000</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'接口错误'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> <span class=\"token number\">1500</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 创建axios实例</span>\n<span class=\"token comment\">// console.log('baseURL', baseURL)</span>\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">baseURL</span><span class=\"token operator\">:</span> <span class=\"token string\">'xxxx'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 填写API baseURL</span>\n  <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">cancelToken</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">/**\n * 请求拦截器\n * 1. 请求前，如果存在token则在请求头中携带token\n   2. POST请求传参加密\n   3. 添加cancelToken,处理路由切换请求cancel\n */</span>\ninstance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">const</span> systemConfigModuleState <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>SystemConfig<span class=\"token punctuation\">)</span>\n  config<span class=\"token punctuation\">.</span>cancelToken <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cancel</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>config<span class=\"token punctuation\">.</span>noCancel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      systemConfigModuleState<span class=\"token punctuation\">.</span>httpCancelTokenList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cancel<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SystemConfig/setAxiosCancelTokenList'</span><span class=\"token punctuation\">,</span> systemConfigModuleState<span class=\"token punctuation\">.</span>httpCancelTokenList<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 添加 token</span>\n  <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>token\n  config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>Authorization <span class=\"token operator\">=</span> token\n  <span class=\"token comment\">// 检测传入集群uuid，不传入则默认使用当前集群uuid</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>config<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    config<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    config<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'POST'</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'PUT'</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'PATCH'</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 对POST请求增加参数防篡改机制：</span>\n        <span class=\"token comment\">// 1. 通过 SHA256 > BASE64 > AES 给 请求体进行加密得出秘钥,并放置在请求头中</span>\n        <span class=\"token comment\">// 2. 后端拿到秘钥后再做校验, 校验正确则通过, 失败则直接报错误</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token keyword\">break</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> config\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 响应拦截器</span>\n<span class=\"token comment\">// 关于token机制, 超时后直接弹出确认框跳转到登录页, 无刷新token操作</span>\ninstance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// 请求失败(非200)</span>\n  <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    NProgress<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> response <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> error\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token comment\">// 请求已发出，但是不在2xx的范围,直接进入统一错误处理</span>\n      <span class=\"token function\">errorHandle</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 处理断网的情况</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">.</span>navigator<span class=\"token punctuation\">.</span>onLine<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'网络异常,请检查网络连接'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">duration</span><span class=\"token operator\">:</span> <span class=\"token number\">2000</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message <span class=\"token operator\">===</span> <span class=\"token string\">'routerCancel'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 接口取消的情况下不提示错误</span>\n        <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">errorHandle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> instance<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 2. API文件引用axios实例</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'./http'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/**\n\t * 登录\n\t * @method managerLogin\n\t * @param &#123;String&#125; user 用户名\n\t * @param &#123;String&#125; password 用户密码\n\t * @param &#123;String&#125; tenant 租户名\n\t*/</span>\n  <span class=\"token function\">login</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js 充当入口文件</span>\n<span class=\"token keyword\">import</span> user <span class=\"token keyword\">from</span> <span class=\"token string\">'./modules/user'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span>\n    user\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>实际使用会将所有<code>API</code>方法,挂载到 <code>vue</code>实例上, 即：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// main.js</span>\n<span class=\"token keyword\">import</span> Vue form <span class=\"token string\">'vue'</span>\n<span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$Api <span class=\"token operator\">=</span> Api<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>最终使用效果:</p>\n<ul>\n<li>每个模块的<code>api</code>方法要在<code>api/index.js</code>文件引入后才可调用</li>\n</ul>\n<ul>\n<li><code>vue</code>文件中使用, 因为已经挂载到<code>vue.prototype.$Api</code>对象上,直接 <code>this.$Api[&#39;模块名称&#39;].函数名()</code>即可</li>\n</ul>\n<ul>\n<li>非<code>vue</code>文件中使用, 如 <code>store</code>、<code>router</code>中的<code>js</code>使用, 则直接<code>import</code>对应的模块</li>\n</ul>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">例</span><span class=\"token operator\">:</span> <span class=\"token keyword\">import</span> authApi <span class=\"token keyword\">from</span> <span class=\"token string\">'@/api/modules/authorization'</span>\n<span class=\"token parameter\">引用</span> <span class=\"token operator\">=></span> auth<span class=\"token punctuation\">.</span><span class=\"token function\">函数名</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> 即可<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p>更换新的<code>API</code>方式后, 可以带来以下的优点：</p>\n<ol>\n<li>拓展性强, 所有参数与<code>axios</code>文档无异, 也可以使用<code>axios</code>的所有功能</li>\n<li>可读性强, 使用方便</li>\n<li>适用范围广, 在<code>vue</code>文件和普通<code>js</code>文件中都可以使用封装好的<code>axios</code>实例</li>\n<li>增加路由切换, 将上一页面<code>pengding</code>的请求<code>cancel</code>, 节省流量</li>\n</ol>\n<h3 id=\"3-代码封装问题\"><a href=\"#3-代码封装问题\" class=\"headerlink\" title=\"3) 代码封装问题\"></a>3) 代码封装问题</h3><p>目前的前端项目之所以频繁出现 改了一个 <code>bug</code> 又出现其他 <code>bug</code> 的原因,除了有程序员粗心以外,我觉得还有另外几个原因：</p>\n<ul>\n<li><p>项目中单个<code>vue</code>文件代码过于臃肿,冗余,修改功能和修复<code>bug</code>十分困难,往往就是几千行代码</p>\n</li>\n<li><p>过多使用 <code>mixin</code> 来进行代码封装,导致代码可读性差</p>\n</li>\n<li><p>各组件之间高度耦合</p>\n</li>\n<li><p>变量经常被过多依赖<br>….</p>\n</li>\n</ul>\n<p>建议:</p>\n<ol>\n<li><p>以一个文件代码不超过<code>1k</code>行的标准(根据实际情况而定)来规定, 超过<code>1k</code>行的代码,即要拆分为组件,如发现该功能存在复用的情况,则可直接封装。</p>\n</li>\n<li><p>多使用<a href=\"http://es6.ruanyifeng.com/#docs/module\">ES6的module功能</a>封装代码(如某些功能函数), 少使用 <code>mixin</code> , <code>ES6</code> 的 <code>module </code>使用更加方便且通用.我所认为需要使用 <code>mixin</code> 的场景,应当是一些功能逻辑不复杂的工具方法,如表单自定义验证方法,可以使用, <code>mixin</code> 使用过多会导致后期维护和组件封装十分困难, 变量来源不可知、变量污染、代码可读性差的问题</p>\n</li>\n<li><p>修改某个方法和变量时,应注意该方法是否在其他地方使用,如有,则要做兼容处理,否则容易出现,另一个使用该方法的地方出现问题</p>\n</li>\n<li><p>少定义公共变量。</p>\n</li>\n</ol>\n<h3 id=\"4-代码规范\"><a href=\"#4-代码规范\" class=\"headerlink\" title=\"4) 代码规范\"></a>4) 代码规范</h3><p>在多人协作的项目中, 制定并共同遵循同一个代码规范是非常必要的,这无论对于新成员阅读代码或是其他成员修改阅读代码都是很有帮助的,我们的<code>JS</code>中已经有了相应的工具是帮助我们制定规范，即 <code>ESlint</code> ,其中我较为推荐的是 <code>standrd</code> 规则</p>\n<p>JavaScript Standard 规则细则: <a href=\"https://standardjs.com/rules-zhcn.html\">https://standardjs.com/rules-zhcn.html</a></p>\n<p>这个规则也是大部分前端团队中用的比较多的规范,在我们的前端项目使用它并安装 VS code 相关插件,即可实现自动代码格式化且符合 <code>standard </code>代码规范。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>代码命名</p></blockquote>\n<p><code>JS</code>命名是统一使用小驼峰写法,</p>\n<p>至于<code>CSS</code>的命名规范,个人是比较推崇 <code>BEM</code> 的命名方式的, <a href=\"https://juejin.im/post/5cc28ed46fb9a032086dd3d3\">https://juejin.im/post/5cc28ed46fb9a032086dd3d3</a></p>\n<p>剩下的HTML命名的话,则不强制</p>\n<h3 id=\"5-构建配置优化\"><a href=\"#5-构建配置优化\" class=\"headerlink\" title=\"5) 构建配置优化\"></a>5) 构建配置优化</h3><p>初始版本的<code>webpack</code>配置优化程度不够, 且版本是<code>2.2.1</code>,所以干脆对项目<code>webpack</code>配置做了升级:</p>\n<ol>\n<li>使用 <code>webpack</code>4</li>\n<li>改造项目结构, 使用<code>vue/cli@3</code>创建项目, 并且升级<code>webpack</code>版本到<code>webpack4</code></li>\n<li>使用<code>parallel-uglify-plugin</code>、<code>HappyPack </code>多进程编译, 加速编译时间</li>\n<li>增加 小于<code>5kb</code>的图片转为<code>base64</code></li>\n<li>压缩图片和代码, 且删除<code>console</code>、<code>debugger</code>代码</li>\n<li>增加了一键部署的功能</li>\n</ol>\n<h3 id=\"6-git-commit-提交规范\"><a href=\"#6-git-commit-提交规范\" class=\"headerlink\" title=\"6) git commit 提交规范\"></a>6) git commit 提交规范</h3><p>规则是 <strong>提交类型(修改范围): 提交内容</strong></p>\n<p>提交类型用于说明 <code>commit</code> 的类别，只允许使用下面8个标识:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#39;feat&#39;, &#x2F;&#x2F; 新功能（feature）\n&#39;bugfix&#39;, &#x2F;&#x2F; bug修复\n&#39;docs&#39;, &#x2F;&#x2F; 文档更新\n&#39;UI&#39;, &#x2F;&#x2F; 只修改页面样式(不影响代码运行的变动)\n&#39;refactor&#39;,&#x2F;&#x2F; 重构（即不是新增功能，也不是修改bug的代码变动）\n&#39;common&#39;, &#x2F;&#x2F; 全局级别的修改(如公共组件或公共配置)\n&#39;build&#39;, &#x2F;&#x2F; 主要目的是修改项目构建系统(例如 webpack，rollup 的配置等)的提交\n&#39;other&#39;, &#x2F;&#x2F; 不属于以上任何类型之一\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"使用commitlint\"><a href=\"#使用commitlint\" class=\"headerlink\" title=\"使用commitlint\"></a>使用<code>commitlint</code></h4><p>此外为了规范 git commit内容提交,增加了<code>commitlint</code>工具拦截commit提交,</p>\n<h4 id=\"1-全局安装-commitlint\"><a href=\"#1-全局安装-commitlint\" class=\"headerlink\" title=\"1.全局安装 commitlint\"></a>1.全局安装 <code>commitlint</code></h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g @commitlint/cli @commitlint/config-conventional<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"2-项目单独安装\"><a href=\"#2-项目单独安装\" class=\"headerlink\" title=\"2.项目单独安装\"></a>2.项目单独安装</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> yorkie --save-dev<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其他配置文件已修改完成, 安装后提交不合规范的<code>commit</code>即会被拦截。</p>\n<p>PS: 本文主要是记录在公司的团队项目中, 对前端项目做的一系列优化, 希望能给你带来一些启发。</p>\n<hr>\n<h3 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"http://louiszhai.github.io/2019/01/04/webpack4/\">使用webpack4提升180%编译速度</a></p></blockquote>\n","text":"背景公司的前端项目是基于Vue技术栈为核心的前端项目,不得不说, 我花了接近将近一个多星期, 才对它有一定的了解, 在不包含引入库和依赖的情况下, 接近 43.3M, src文件下的.vue文件 接近700个, 这么大的项目, 可是让我疑惑的点是, 在优化的方面, 却有很多不足之...","link":"","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Vuex-%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">1) Vuex 的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-API%E7%9A%84%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">2) API的调用方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E4%BB%A3%E7%A0%81%E5%B0%81%E8%A3%85%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">3) 代码封装问题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">4) 代码规范</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%9E%84%E5%BB%BA%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96\"><span class=\"toc-text\">5) 构建配置优化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-git-commit-%E6%8F%90%E4%BA%A4%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">6) git commit 提交规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8commitlint\"><span class=\"toc-text\">使用commitlint</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%85%A8%E5%B1%80%E5%AE%89%E8%A3%85-commitlint\"><span class=\"toc-text\">1.全局安装 commitlint</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E9%A1%B9%E7%9B%AE%E5%8D%95%E7%8B%AC%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">2.项目单独安装</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><span class=\"toc-text\">参考文献</span></a></li></ol>","author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}},"mapped":true,"prev_post":{"title":"教你快速拥有一个免费的图床且快捷上传","uid":"f7aad555d08cbab83a738e706571ee98","slug":"教你快速拥有一个免费的图床","date":"2020-05-11T09:42:32.000Z","updated":"2022-03-30T02:35:15.672Z","comments":true,"path":"api/articles/教你快速拥有一个免费的图床.json","keywords":null,"cover":[],"text":" 经常写博客的人都知道, 找图床是个很令人头疼的问题, 特别是我们这种没钱的, 总得找一些免费的图床, 一开始选择还比较多, 有微博图床、七牛云图床等等可供选择, 可是到了 2020年, 可选择且稳定还免费的图床, 越来越少了,于是无奈之下, 只能选择把图片手动上传到 githu...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"开发技巧","slug":"开发技巧","count":2,"path":"api/categories/开发技巧.json"}],"tags":[{"name":"开发技巧","slug":"开发技巧","count":2,"path":"api/tags/开发技巧.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}},"next_post":{"title":"教你如何做一个表白神器","uid":"0ea28cef92d6f8f6e9cc5aa8158bb914","slug":"教你如何做一个表白神器","date":"2020-05-09T08:49:49.000Z","updated":"2022-03-30T02:35:15.672Z","comments":true,"path":"api/articles/教你如何做一个表白神器.json","keywords":null,"cover":"https://image.xposean.top/blogImage/002.png","text":" 初衷前段时间发现微信群里有人天天准时准点的在发咨询或者消息, 身为程序员的我一眼就发现这是机器人所为, 于是萌生了利用机器人每天向女票定时发消息的想法, 那么开始我的折腾之旅吧。 关于微信机器人的开源项目, github一搜也是有一大堆了, 身为前端, 自然是拥抱node啦, ...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"日常","slug":"日常","count":1,"path":"api/categories/日常.json"}],"tags":[{"name":"日常","slug":"日常","count":1,"path":"api/tags/日常.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}}}