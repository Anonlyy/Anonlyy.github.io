{"title":"初探PWA的Service Worker","uid":"5b1e2e9ed1fe26668be4e02b12beafaf","slug":"初探PWA的Service-Worker","date":"2018-04-23T01:48:25.000Z","updated":"2022-03-30T02:35:15.670Z","comments":true,"path":"api/articles/初探PWA的Service-Worker.json","keywords":null,"cover":[],"content":"<hr>\n<p><strong>Progressive Web App</strong>, 简称 <strong>PWA</strong>，是提升<code> Web App</code>的体验的一种新方法，能给用户原生应用的体验，致力于用前沿的技术开发，让网页使用如同<strong>原生App</strong>般的体验的一系列<strong>方案</strong>。</p>\n<p>用来自<strong>Google Developers</strong>的解答<code>Progressive Web Apps</code>:</p>\n<ul>\n<li><strong>渐进式</strong> - 适用于所有现代浏览器，因为它是以渐进式增强作为宗旨开发的</li>\n<li><strong>离线使用</strong> - 借助 <code>Service Worker</code> 能够在离线或者网络较差的情况下正常访问</li>\n<li><strong>可安装</strong> - 用户可以添加到桌面并生成快捷方式,一键访问</li>\n<li><strong>类似应用</strong> - 由于是在 <a href=\"https://developers.google.cn/web/fundamentals/architecture/app-shell\"><code>App Shell</code></a> 模型基础上开发，因为应具有 <code>Native App</code> 的交互和导航，给用户 <code>Native App</code> 的体验</li>\n<li><strong>持续更新</strong> - 始终是最新的，无版本和更新问题</li>\n<li><strong>安全</strong> - 通过 <code>HTTPS</code> 协议提供服务，防止窥探和确保内容不被篡改</li>\n<li><strong>可索引</strong> - 应用清单文件和 <code>Service Worker</code> 可以让搜索引擎索引到，从而将其识别为『应用』</li>\n<li><strong>粘性</strong> - 网页已经关闭的情况下还可以通过<a href=\"https://zhangxinxu.github.io/https-demo/notification/basic.html\">推送后台通知</a>等，让用户回流</li>\n</ul>\n<p>我们也可以通过一个DEMO看看实际效果&#x3D;&gt;<a href=\"https://lavas-project.github.io/lavas-demo/appshell/#/\">lavas-demo</a></p>\n<p>而其中,<strong>PWA方案</strong>的最主要核心功能都是依赖于<code>Service Worker</code>这个API来实现的.</p>\n<hr>\n<h2 id=\"Service-Worker是什么呢\"><a href=\"#Service-Worker是什么呢\" class=\"headerlink\" title=\"Service Worker是什么呢?\"></a>Service Worker是什么呢?</h2><p>W3C 组织早在 2014 年 5 月就提出过 <code>Service Worker</code>这样的一个 HTML5 API ，主要用来做持久的离线缓存。</p>\n<p>当然这个 API 不是凭空而来，至于其中的由来我们可以简单的捋一捋：</p>\n<p>浏览器中的<code> javaScript</code> 都是运行在一个单一主线程上的，在同一时间内只能做一件事情。随着 Web 业务不断复杂，我们逐渐在 js 中加了很多耗资源、耗时间的复杂运算过程，这些过程导致的性能问题在 WebApp 的复杂化过程中更加凸显出来。</p>\n<p>W3C 组织早早的洞察到了这些问题可能会造成的影响，这个时候有个叫<code>Web Worker</code> 的 API 被造出来了，这个 API 的唯一目的就是解放主线程，<code>Web Worker</code> 是脱离在主线程之外的，将一些复杂的耗时的活交给它干，完成后通过 <code>postMessage</code> 方法告诉主线程，而主线程通过 <code>onMessage</code> 方法得到 <code>Web Worker</code> 的结果反馈。</p>\n<p>一切问题好像是解决了，但 Web Worker 是临时(即浏览器关闭后就关闭了)的，我们能不能有一个东东是一直持久存在的，并且随时准备接受主线程的命令呢？基于这样的需求推出了最初版本的 <code>Service Worker</code> ，<code>Service Worker</code> 在 <code>Web Worker</code> 的基础上加上了持久离线缓存能力.</p>\n<p><code>Service Worker</code> 有以下功能和特性：</p>\n<ul>\n<li>一个<strong>独立</strong>的 <code>worker</code> 线程，独立于当前网页进程。</li>\n<li>一旦被 <code>install</code>，就永远存在，除非被 <code>uninstall</code></li>\n<li>需要的时候可以直接唤醒，不需要的时候自动睡眠</li>\n<li>可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）</li>\n<li>离线内容开发者可控</li>\n<li>能向客户端推送消息</li>\n<li><strong>不能直接操作 <code>DOM</code></strong></li>\n<li>出于安全的考虑，必须在 <strong><code>HTTPS</code></strong> 环境下才能工作</li>\n</ul>\n<p>所以我们基本上知道了 <code>Service Worker</code> 的伟大使命，就是让缓存做到优雅和极致，让 Web App 相对于 Native App 的缺点更加弱化，也为开发者提供了对性能和体验的无限遐想。</p>\n<h3 id=\"Service-Worker工作原理\"><a href=\"#Service-Worker工作原理\" class=\"headerlink\" title=\"Service Worker工作原理\"></a>Service Worker工作原理</h3><p><code>Service Worker</code>的技术核心是<code>Service Worker</code>脚本，它 是一种由<code>Javascript</code>编写的浏览器端代理脚本。</p>\n<p>前端页面向内核发起注册时会将脚本地址通知内核，内核会启动独立进&#x2F;线程加载<code>Service Worker</code>脚本并执行<code>Service Worker</code>安装及激活动作。成功激活后便进入空闲等待状态，若当前的<code>Service Worker</code>进&#x2F;线程一直没有管辖的页面或者事件消息时会自动终止（具体的终止策略视不同浏览器及版本而定，不会影响前端编写逻辑，但前端勿在<code>Service Worker</code>脚本中保存需要持久化的信息，可以借助<code>localstorage</code>），当打开新的可管辖页面或者已管辖页面发起<code>message</code>等消息时，<code>Service Worker</code>进&#x2F;线程会被重新唤起。</p>\n<p>每当已安装的<code>Service Worker</code>有管辖页面被打开时，便会触发<code>Service Worker</code>脚本更新，当<code>Service Worker</code>脚本发生了更改，便会忽略本地网络<code>cache</code>的<code>Service Worker</code>脚本直接从网络拉取。若网络拉取的与本地有一个字节的差异都会触发<code>Service Worker</code>脚本的更新，更新流程与安装类似，只是在更新安装成功后不会立即进入<code>active</code>状态，需要等待旧版本的<code>Service Worker</code>进&#x2F;线程终止。</p>\n<p><img src=\"https://x5.tencent.com/tbs/img/article/sw-1.png\"></p>\n<h3 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 在html里注册service-worker</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>serviceWorker <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    navigator<span class=\"token punctuation\">.</span>serviceWorker<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sw.js'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">registration</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Registered events at scope: '</span><span class=\"token punctuation\">,</span> registration<span class=\"token punctuation\">.</span>scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\t<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 首先定义需要缓存的路径, 以及需要缓存的静态文件的列表。</span>\n<span class=\"token keyword\">var</span> cacheStorageKey <span class=\"token operator\">=</span> <span class=\"token string\">'minimal-pwa-8'</span>\n\n<span class=\"token keyword\">var</span> cacheList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"main.css\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"e.png\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"*.png\"</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 借助 Service Worker, 可以在注册完成安装 Service Worker 时, 抓取资源写入缓存:</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'install'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Cache event!'</span><span class=\"token punctuation\">)</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">waitUntil</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>cacheStorageKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cache</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Adding to Cache:'</span><span class=\"token punctuation\">,</span> cacheList<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>cacheList<span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Skip waiting!'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">skipWaiting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 网页抓取资源的过程中, 在 Service Worker 可以捕获到 fetch 事件, 可以编写代码决定如何响应资源的请求:</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fetch'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// console.log('Fetch event:', e.request.url)</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">respondWith</span><span class=\"token punctuation\">(</span>\n    caches<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Using cache for:'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> response\n      <span class=\"token punctuation\">&#125;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fallback to fetch:'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"关于事件\"><a href=\"#关于事件\" class=\"headerlink\" title=\"关于事件\"></a>关于事件</h3><p><strong>install</strong> 事件:当前<code>Service Worker</code>脚本被安装时，会触发 install 事件。</p>\n<p><strong>push</strong>事件:<br>push 事件是为推送通知而准备的。不过首先你需要了解一下 <a href=\"http://www.zhangxinxu.com/wordpress/2016/07/know-html5-web-notification/\"><code>Notification API</code> </a>和 <code>PUSH API</code>。</p>\n<p>通过 <code>PUSH API</code>，当订阅了推送服务后，可以使用推送方式唤醒 <code>Service Worker</code> 以响应来自系统消息传递服务的消息，即使用户已经关闭了页面。</p>\n<p><strong>online&#x2F;offline</strong>事件:<br>当网络状态发生变化时，会触发 <code>online</code> 或 <code>offline</code> 事件。结合这两个事件，可以与 <code>Service Worker</code> 结合实现更好的离线使用体验，例如当网络发生改变时，替换&#x2F;隐藏需要在线状态才能使用的链接导航等。</p>\n<p><strong>fetch</strong> 事件：<br>当我们安装完<code>Service Worker</code>成功并进入激活状态后即运行于浏览器后台,我们的这个线程就会一直监控我们的页面应用,如果出现<code>HTTP</code>请求,那么就会触发<code>fetch</code>事件，并且给出自己的响应。<br>这个功能是十分强大的,借助 <code>Fetch API</code> 和 <code>Cache API</code> 可以编写出复杂的策略用来区分不同类型或者页面的资源的处理方式。它能够提供更加好的用户体验:<br>例如可以实现<strong>缓存优先、降级处理</strong>的策略逻辑：监控所有 http 请求，当请求资源已经在缓存里了，直接返回缓存里的内容；否则使用 fetch API 继续请求，如果是 图片或 css、js 资源，请求成功后将他们加入缓存中；如果是离线状态或请求出错，则降级返回预缓存的离线内容。</p>\n<hr>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>看到这里很多人会有疑问了,既然可以通过<code>service-worker</code>缓存资源,那如果一个正式项目,在项目迭代后,并将代码推送到正式环境后,前端怎么实时知道并重新缓存新的资源呢?</p>\n<p>​    第一种方式,就是每次修改都手动去更改sw文件的版本号,触发更新。</p>\n<p>​    第二种就是使用<code>webpack</code>插件自动化处理</p>\n<p>事实上,在我们真实的用<code>webpack</code>生成的项目中,如果按照第一种方式手动去写<code>Service-worker.js</code>文件的话，会遇到两个问题:</p>\n<ol>\n<li><code>webpack</code>生成的资源多会生成一串hash，<code>Service-worker.js</code>的资源列表里面需要同步更新这些带hash的资源； </li>\n<li>每次更新代码，都需要通过更新<code>service-worker</code>文件版本号来通知客户端对所缓存的资源进行更新.</li>\n</ol>\n<p>看到这里就该让用<code>webpack</code>插件:<a href=\"https://github.com/NekR/offline-plugin\">offline-plugin</a> 登场了,官方同时也推荐<a href=\"https://github.com/goldhand/sw-precache-webpack-plugin\">sw-precache-webpack-plugin</a> ,<a href=\"https://github.com/NekR/offline-plugin\">offline-plugin</a>不仅能够解决刚刚那个提到的缓存更新的问题,同时还具备以下的优点:</p>\n<ul>\n<li>1、自动生成和更新Service-worker.js文件和自动为SW添加缓存资源列表 </li>\n<li>2、更为详细的文档和例子；</li>\n<li>3、迭代频率相对更高，star数更多；</li>\n<li>4、自动处理生命周期，用户无需纠结生命周期的坑；</li>\n<li>5、支持自动生成<code>manifest</code>文件。</li>\n</ul>\n<p>部署到项目中也十分的简单</p>\n<h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> offline-plugin <span class=\"token punctuation\">[</span>--save-dev<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-初始化\"><a href=\"#2-初始化\" class=\"headerlink\" title=\"2.初始化\"></a>2.初始化</h4><p>第一步，进入<code>webpack.config.js</code>:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// webpack.config.js example</span>\n\n<span class=\"token keyword\">var</span> OfflinePlugin <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'offline-plugin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// ... other plugins</span>\n    <span class=\"token comment\">// it's always better if OfflinePlugin is the last plugin added</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">OfflinePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-入口文件导入\"><a href=\"#3-入口文件导入\" class=\"headerlink\" title=\"3.入口文件导入\"></a>3.入口文件导入</h4><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> OfflinePluginRuntime <span class=\"token keyword\">from</span> <span class=\"token string\">'offline-plugin/runtime'</span><span class=\"token punctuation\">;</span>\nOfflinePluginRuntime<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>经过上面的步骤，<code>offline-plugin</code>已经集成到项目之中，通过<code>webpack</code>构建即可。 </p>\n<p>具体代码也可查看 <a href=\"https://github.com/NekR/offline-plugin\">demo</a></p>\n<hr>\n<h4 id=\"博客中使用\"><a href=\"#博客中使用\" class=\"headerlink\" title=\"博客中使用\"></a>博客中使用</h4><p>在博客页面中<code>pwa</code>的使用, 其实更加的广泛, 那么本页面实际上也是使用了<code>pwa</code>的, 不信? 你可以试试离线访问哦</p>\n<p>那么是怎么使用的呢？</p>\n<p>如果你的博客页面是基于<code>jekyll</code>或者是<code>hexo</code>搭建起来的, 那么直接就有现成的插件可以使用啦<br><a href=\"https://github.com/lavas-project/jekyll-pwa\">jekyll-pwa</a></p>\n<p><a href=\"https://github.com/lavas-project/hexo-pwa\">hexo-pwa</a></p>\n<p>以<code>hexo</code>为例:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save hexo-pwa<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在<code>hexo</code>项目中找到<code>    _config.yml</code>文件, 添加以下代码</p>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">pwa:\n  manifest:\n  #   path: &#x2F;manifest.json\n  #   body:\n  #     name: hexo\n  #     short_name: hexo\n  #     icons:\n  #       - src: &#x2F;images&#x2F;android-chrome-192x192.png\n  #         sizes: 192x192\n  #         type: image&#x2F;png\n  #       - src: &#x2F;images&#x2F;android-chrome-512x512.png\n  #         sizes: 512x512\n  #         type: image&#x2F;png\n  #     start_url: &#x2F;index.html\n  #     theme_color: &#39;#ffffff&#39;\n  #     background_color: &#39;#ffffff&#39;\n  #     display: standalone\n  serviceWorker:\n    path: &#x2F;sw.js\n    preload:\n      urls:\n        - &#x2F;\n      posts: 5\n    opts:\n      networkTimeoutSeconds: 5\n    routes:\n      # - pattern: !!js&#x2F;regexp &#x2F;hm.baidu.com&#x2F;\n      #   strategy: networkOnly\n      - pattern: !!js&#x2F;regexp &#x2F;.*\\.(js|css|jpg|jpeg|png|gif)$&#x2F;\n        strategy: cacheFirst\n      - pattern: !!js&#x2F;regexp &#x2F;\\&#x2F;&#x2F;\n        strategy: networkFirst\n  priority: 5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>重启服务, 再打开就可以啦！</p>\n<h3 id=\"PWA的浏览器支持情况\"><a href=\"#PWA的浏览器支持情况\" class=\"headerlink\" title=\"PWA的浏览器支持情况\"></a>PWA的浏览器支持情况</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://lavas.baidu.com/ready\">兼容性查看</a></p></blockquote>\n<p>毕竟是自家产品,chrome浏览器肯定是支持度最高的浏览器,chrome64版本是基本支持所有PWA功能<code>API</code>的。</p>\n<p>但国内的浏览器·支持情况相对差一些,而且chrome移动版的使用人群还是偏少的,不过在UC的支持程度也不低</p>\n<p><img src=\"http://p53ff6x0c.bkt.clouddn.com/18-4-24/56137583.jpg\"></p>\n<p><img src=\"http://p53ff6x0c.bkt.clouddn.com/18-4-24/70665880.jpg\"></p>\n<p><img src=\"http://p53ff6x0c.bkt.clouddn.com/18-4-24/79002804.jpg\"></p>\n","text":" Progressive Web App, 简称 PWA，是提升 Web App的体验的一种新方法，能给用户原生应用的体验，致力于用前沿的技术开发，让网页使用如同原生App般的体验的一系列方案。 用来自Google Developers的解答Progressive Web App...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Service-Worker%E6%98%AF%E4%BB%80%E4%B9%88%E5%91%A2\"><span class=\"toc-text\">Service Worker是什么呢?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Service-Worker%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Service Worker工作原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">实例代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">关于事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">1.安装</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">2.初始化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5\"><span class=\"toc-text\">3.入口文件导入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8D%9A%E5%AE%A2%E4%B8%AD%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">博客中使用</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PWA%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%AF%E6%8C%81%E6%83%85%E5%86%B5\"><span class=\"toc-text\">PWA的浏览器支持情况</span></a></li></ol></li></ol>","author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}},"mapped":true,"prev_post":{"title":"JavaScript的高级运用之节流与防抖","uid":"7b6c80c82769c35e7a6f32b608c38d88","slug":"JavaScript的高级运用节流与防抖","date":"2018-05-17T01:33:34.000Z","updated":"2022-03-30T02:35:15.665Z","comments":true,"path":"api/articles/JavaScript的高级运用节流与防抖.json","keywords":null,"cover":"https://image.xposean.top/blogImage/0021.png","text":"概念与目的首先还是得先来讲讲概念,节流和防抖的目的都十分的简单,就是为了性能优化而出现的,目的是为了解决一些短时间内连续执行导致性能不佳或者内存消耗巨大的情况。这类事件有:scroll keyup mousemove resize事件等，短时间内会不断的触发，在性能上消耗是非常大...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/tags/JavaScript.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}},"next_post":{"title":"移动设备引发的一像素边框问题","uid":"87f74f29e587dfbe6578c326f4dc0a70","slug":"移动设备引发的一像素边框问题","date":"2018-02-27T01:41:55.000Z","updated":"2022-03-30T02:35:15.678Z","comments":true,"path":"api/articles/移动设备引发的一像素边框问题.json","keywords":null,"cover":"https://image.xposean.top/blogImage/0017.png","text":"熟悉移动web开发的同学一定对1像素边框问题不陌生,随着移动端web项目越来越多,要求也越来越高，好多设计师都发现了，你们前端实现的边线为什么这么粗的，根本不是1像素，好吗？一句很普通的border: 1px solid white;在PC端浏览器上会正常显示1px的边框,然而放...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}}}