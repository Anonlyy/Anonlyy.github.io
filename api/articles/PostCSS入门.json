{"title":"PostCSS入门","uid":"a4b264498977972b162e90cae20a3771","slug":"PostCSS入门","date":"2017-10-24T06:25:07.000Z","updated":"2022-03-30T02:35:15.667Z","comments":true,"path":"api/articles/PostCSS入门.json","keywords":null,"cover":"https://image.xposean.top/blogImage/0024.png","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>我想你应该已经听说过<a href=\"http://postcss.com/\">PostCSS</a>,它比<a href=\"https://github.com/postcss/benchmark#preprocessors\">libsass</a>快了几乎两倍(并且比Ruby Sass快了28倍)； 或者听说过它支持<a href=\"http://cssnext.io/\">cssnext</a>和自动添加私有前缀而且可扩展功能,难道你一点都不好奇吗？</p>\n<p>PostCSS最强大之处在于它是模块化并且基于插件的架构，不过这也是个缺点。如果你之前在项目中使用Sass(比如大多数的设计师和前端开发者)，你从不需要配置任何东西——Sass内置了全部实用功能，开箱即用。 然而，PostCSS需要你做一些配置。你不得不从一眼看不到底的<a href=\"https://github.com/postcss/postcss/blob/master/docs/plugins.md\">插件列表</a>选择插件并且自己把全部插件一起配置。但这同时意味着它的自定义程度高,足够实现你想要的。</p>\n<h2 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h2><p>PostCSS在以惊人的速度发展，而且越来越受人欢迎。越来越多的人开始在了解它，使用它。因为他们意识到，在项目中使用PostCSS让他们意识到了眼前一亮。</p>\n<p><img src=\"http://www.w3cplus.com/sites/default/files/blogs/2015/1510/postcssdownloads.png\"></p>\n<p>2014年总共不到140万的下载量，但从2015年1月份到6月份已经超过380万个下载。</p>\n<p>**<a href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a>**是PostCSS中最流行的插件，其中Google、Shopify、Twitter、Bootstrap和Codepen都在使用这个插件。Wordpress也使用Autoprefixer插件，而且还使用RTLCSS插件。Alibaba使用了几个PostCSS插件，以及也参加PostCSS的开发。</p>\n<h2 id=\"运行PostCSS\"><a href=\"#运行PostCSS\" class=\"headerlink\" title=\"运行PostCSS\"></a>运行PostCSS</h2><p>运行PostCSS的方法有很多种。你可以很容易地将它添加到Gulp、webpack的构建过程中；<br>或者是通过最简单的方式,即postcss-cli来构建都是OK的,但因为我是习惯使用gulp,所以接下来介绍的是通过gulp配置,如果想使用其他方式构建，请自行度娘或google。</p>\n<p>在已经安装了gulp的配置环境下,我们直接开始进行postCSS的配置.</p>\n<h3 id=\"开始配置\"><a href=\"#开始配置\" class=\"headerlink\" title=\"开始配置\"></a>开始配置</h3><p>首先在你的项目中创建两个文件夹，一个命名为src，另一个命名为dest。src文件夹用来放置未处理的CSS文件，而dest用来放置PostCSS插件处理后的文件。</p>\n<p>接下来需要做的就是在你的项目中安装gulp-postcss插件，安装好之后就可以使用PostCSS处理器。</p>\n<p>打开你的命令终端(CMD)，并且进入到你的项目根目录下，然后在命令终端输入下面的命令：</p>\n<pre><code>npm install --save-dev gulp-postcss\n</code></pre>\n<p>安装完成后你的项目结构看起来就应该像这样：<br><img src=\"http://www.w3cplus.com/sites/default/files/blogs/2015/1510/gulpproject.png\"></p>\n<p>现在通过编辑器打开gulpfile.js文件，并且创建gulp和gulp-postcss变量，如下面代码所示：</p>\n<pre><code>var gulp = require(&#39;gulp&#39;); \nvar postcss = require(&#39;gulp-postcss&#39;);\n</code></pre>\n<p>那我们现在可以设置一个任务，让PostCSS读取CSS原文件并且处理它。</p>\n<p>添加的代码如下：</p>\n<pre><code>gulp.task(&#39;css&#39;, function () &#123;\n  var processors = [ ];\n  return gulp.src(&#39;./src/*.css&#39;).pipe(postcss(processors)).pipe(gulp.dest(&#39;./dest&#39;)); \n&#125;);\n</code></pre>\n<p>我们一起来看一下上面的代码。在第一行，设置了一个任务名叫css。这个任务将会执行一个函数，同时在这个函数中创建了一个名为processors的数组。现在这个数组为空，这里将插入我们想使用的PostCSS插件。<br>在processors数组后面，我们指定了需要处理的目标文件，即src目录中的任何CSS文件。</p>\n<p>这里面使用了两个.pipe()函数，设置postcss()执行PostCSS，并且给postcss()传递processors参数，后面会告诉PostCSS要使用哪个插件。</p>\n<p>接下来的第二个.pipe()函数，指定结过PostCSS处理后的CSS放置在dest文件夹中。</p>\n<h3 id=\"添加PostCSS插件\"><a href=\"#添加PostCSS插件\" class=\"headerlink\" title=\"添加PostCSS插件\"></a>添加PostCSS插件</h3><p>假设,现在我们添加需要的PostCSS插件：<strong>Autoprefixer</strong>(处理浏览器私有前缀)著作权归作者所有。<br>运行下面的命令，将插件安装到你的项目:</p>\n<pre><code>npm install autoprefixer --save-dev\n</code></pre>\n<p>接下来，在我们的项目中定义变量，将这些插件加载到我们的项目中。和前面的方式一样，在<strong>gulpfile.js</strong>文件中添加下面的代码：</p>\n<pre><code> var autoprefixer = require(&#39;autoprefixer&#39;);\n</code></pre>\n<p>然后将这个插件添加到processors数组中，更新后的数组如下：</p>\n<pre><code>var processors = [ autoprefixer];\n</code></pre>\n<p>插件已经添加到了<code>processors</code>数组中了，这个时候<code>PostCSS</code>会知道将这些插件功能应用到我们的CSS源文件中。</p>\n<h3 id=\"测试编译\"><a href=\"#测试编译\" class=\"headerlink\" title=\"测试编译\"></a>测试编译</h3><p>在src目录中创建一个测试文件style.css，并在这个文件中添加一些CSS的测试代码：</p>\n<pre><code> /* Testing autoprefixer */ \n.autoprefixer &#123; display: flex; &#125;\n</code></pre>\n<p>在命令终端执行<code>gulp css</code>命令。在dest目录生成的文件会有下面的代码：</p>\n<pre><code>/* Testing autoprefixer */ \n.autoprefixer &#123; \n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex; \n&#125;\n</code></pre>\n<p>如上面编译出来的代码你应该看到了Autoprefixer给需要的属性添加了浏览器的私有前缀，编译符合需求的代码。</p>\n<h4 id=\"设置插件选项\"><a href=\"#设置插件选项\" class=\"headerlink\" title=\"设置插件选项\"></a>设置插件选项</h4><p>注：每一个插件都有对应的配置参数选项，如果你想为一个插件配置选项参数，你可以在gulpfile.js文件中,在插件后面添加一对括号，并在里面传递选项的参数。例如，Autoprefixer需要指定对应的浏览器列表参数，你可以像这样设置：</p>\n<pre><code> var processors = [ \n     autoprefixer(&#123;browsers: [&#39;last 1 version&#39;]&#125;)\n ];\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>通过<code>npm</code>(或<code>cnpm</code>)创建项目，并且将<code>gulp</code>安装到<code>gulpfile</code>文件</li>\n<li>安装<code>gulp-postcss</code>插件</li>\n<li>设置你的<code>gulpfile.js</code>文件，将<code>gulp</code>和<code>gulp-postcss</code>加载到项目中</li>\n<li>创建一个任务，来编译你的<code>CSS</code></li>\n<li>在任务中，设置一个<code>processors</code>数组</li>\n<li>在<code>.pipe()</code>设置<code>一个postcss()</code>函数，并且将<code>processors</code>传递给它</li>\n</ol>\n<p>你可以根据上面的教程介绍，遵循相同的步骤，你可以将<code>PostCSS</code>任何插件安装到项目中。</p>\n<p>通过<code>npm install &lt;plugin_name&gt; –save-dev</code> 命令将插件安装到你的项目中<br>类似<code>var autoprefixer = require(&quot;autoprefixer&quot;)</code>代码在你的<code>gulpfile.js</code>文件中定义要加载的插件变量名<br>将变量名添加到你的<code>preprocessors</code>数组中</p>\n","text":"概述我想你应该已经听说过PostCSS,它比libsass快了几乎两倍(并且比Ruby Sass快了28倍)； 或者听说过它支持cssnext和自动添加私有前缀而且可扩展功能,难道你一点都不好奇吗？ PostCSS最强大之处在于它是模块化并且基于插件的架构，不过这也是个缺点。如果...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"CSS","slug":"CSS","count":4,"path":"api/categories/CSS.json"}],"tags":[{"name":"CSS","slug":"CSS","count":4,"path":"api/tags/CSS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%B0%E7%8A%B6\"><span class=\"toc-text\">现状</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8CPostCSS\"><span class=\"toc-text\">运行PostCSS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">开始配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B7%BB%E5%8A%A0PostCSS%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">添加PostCSS插件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">测试编译</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE%E6%8F%92%E4%BB%B6%E9%80%89%E9%A1%B9\"><span class=\"toc-text\">设置插件选项</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}},"mapped":true,"prev_post":{"title":"来聊聊localStorage、sessionStorage和cookie","uid":"06a1c23ef60fb42dc35a87810987448c","slug":"来聊聊localStorage、sessionStorage和cookie","date":"2017-10-24T07:27:14.000Z","updated":"2022-03-30T02:35:15.673Z","comments":true,"path":"api/articles/来聊聊localStorage、sessionStorage和cookie.json","keywords":null,"cover":"https://image.xposean.top/blogImage/005.png","text":"首先当然还得是来介绍一下基本概念. 基本概念Cookie对于Cookie,不用介绍的太多,想必大家也都很熟悉了.Cookie实际上是一小段的文本信息,每个Cookie的大小限制为4KB. 它的主要用途有保存登录信息，比如你登录某个网站市场可以看到浏览器提醒你需要“记住密码”，这通...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/tags/JavaScript.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}},"next_post":{}}