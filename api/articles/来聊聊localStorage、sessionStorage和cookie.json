{"title":"来聊聊localStorage、sessionStorage和cookie","uid":"06a1c23ef60fb42dc35a87810987448c","slug":"来聊聊localStorage、sessionStorage和cookie","date":"2017-10-24T07:27:14.000Z","updated":"2022-03-30T02:35:15.673Z","comments":true,"path":"api/articles/来聊聊localStorage、sessionStorage和cookie.json","keywords":null,"cover":"https://image.xposean.top/blogImage/005.png","content":"<p>首先当然还得是来介绍一下基本概念.</p>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><p>对于<code>Cookie</code>,不用介绍的太多,想必大家也都很熟悉了.<code>Cookie</code>实际上是一小段的文本信息,每个Cookie的大小限制为4KB.</p>\n<p>它的主要用途有保存登录信息，比如你登录某个网站市场可以看到浏览器提醒你需要“记住密码”，这通常就是通过在 <code>Cookie</code> 中存入一段辨别用户身份的数据来实现的。</p>\n<h3 id=\"web-Storage\"><a href=\"#web-Storage\" class=\"headerlink\" title=\"web Storage\"></a>web Storage</h3><p><code>sessionStorage</code> 和 <code>localStorage</code> 是<strong>HTML5 Web Storage API</strong> 提供的，可以方便的在<code>web</code>请求之间保存数据。有了本地数据，就可以避免数据在浏览器和服务器间不必要地来回传递。</p>\n<p>在这之前,客户端存储数据都是使用cookie,但是大家都知道,每一次HTTP请求,都会带着cookie给后端,即使是不需要传输的情况下,这在无形之中就增加带宽的浪费,而<code>sessionStorage</code>和<code>localStorage</code>不会自动把数据发给服务器，仅在本地保存。</p>\n<h3 id=\"三者的异同\"><a href=\"#三者的异同\" class=\"headerlink\" title=\"三者的异同\"></a>三者的异同</h3><p><img src=\"http://it.dyg.cn/wp-content/uploads/2017/08/Snipaste_2017-08-05_21-13-28.png\"></p>\n<p><strong>通过上图的表,大概总结一下webstorage API的好处:</strong><br>1.** 减少网络流量<strong>：一旦数据保存在本地后，就可以避免再向服务器请求数据，因此减少不必要的数据请求，减少数据在浏览器和服务器间不必要地来回传递。<br>2. <strong>快速显示数据</strong>：性能好，从本地读数据比通过网络从服务器获得数据快得多，本地数据可以即时获得。再加上网页本身也可以有缓存，因此整个页面和数据都在本地的话，可以立即显示。<br>3.</strong> 临时存储**：很多时候数据只需要在用户浏览一组页面期间使用，关闭窗口后数据就可以丢弃了，这种情况使用<code>sessionStorage</code>非常方便。<br>4. <strong>更多丰富易用的接口</strong>：<code>Web Storage</code>提供了一套更为丰富的接口，使得数据操作更为简便。</p>\n<h2 id=\"Webstorage-API的简单使用\"><a href=\"#Webstorage-API的简单使用\" class=\"headerlink\" title=\"Webstorage API的简单使用\"></a>Webstorage API的简单使用</h2><pre><code>//创建localStorage对象\nvar localstroage = window.localStorage;  \n//存储值\nlocalstroage.setItem(&#39;name&#39;,&#39;Jack&#39;);  \nlocalstroage.setItem(&#39;uid&#39;,&#39;10001&#39;);  \n//获取值\nvar openid = localstroage.getItem(&#39;openid&#39;);  \nconsole.log(openid);\n//删除值\nlocalstroage.removeItem(&#39;openid&#39;);  \n//清空值\nlocalstroage.clear(); \n</code></pre>\n<p>而<code>sessionStorage</code>的使用则与<code>localStorage</code>完全一致.</p>\n<p>此外,HTML5在提供了<code>storage</code>事件,当键值改变或者clear的时候，就可以触发<code>storage</code>事件,相当于加了个监听事件,这也是<code>cookie</code>原生没有的.</p>\n<h2 id=\"应用场景和总结\"><a href=\"#应用场景和总结\" class=\"headerlink\" title=\"应用场景和总结\"></a>应用场景和总结</h2><p>我们的<code>Storage API</code>,可以用在<strong>IM聊天记录</strong>,<strong>购物车</strong>,<strong>HTML5的游戏数据存储</strong>,<strong>内容多的表单</strong>.<br>并非说有了<code>localStorage</code>、<code>sessionStorage</code>,<code>cookie</code>就会被淘汰了,就目前的客户端(浏览器)使用而言,<code>cookie</code>的使用率仍然是非常高的,只是在某种特定的情况下呢,使用我们的<code>webStorageAPI</code>会更加方便好用,更快的解决问题.</p>\n<p>此外,我们的<code>webStorageAPI</code>也仍存在一些局限,一个是兼容性问题,是不支持<code>IE8</code>以下的,还有一个是如果用户使用的是浏览器的隐身模式的话,是无法访问用<code>localStorage</code>存储下来的值的。</p>\n","text":"首先当然还得是来介绍一下基本概念. 基本概念Cookie对于Cookie,不用介绍的太多,想必大家也都很熟悉了.Cookie实际上是一小段的文本信息,每个Cookie的大小限制为4KB. 它的主要用途有保存登录信息，比如你登录某个网站市场可以看到浏览器提醒你需要“记住密码”，这通...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">基本概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Cookie\"><span class=\"toc-text\">Cookie</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#web-Storage\"><span class=\"toc-text\">web Storage</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E8%80%85%E7%9A%84%E5%BC%82%E5%90%8C\"><span class=\"toc-text\">三者的异同</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Webstorage-API%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">Webstorage API的简单使用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E5%92%8C%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">应用场景和总结</span></a></li></ol>","author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}},"mapped":true,"prev_post":{"title":"移动web适配方案简述","uid":"0253ce7d41971055efd7d65777100cee","slug":"移动web适配方案简述","date":"2017-10-24T07:47:35.000Z","updated":"2022-03-30T02:35:15.678Z","comments":true,"path":"api/articles/移动web适配方案简述.json","keywords":null,"cover":[],"text":"众所周知,目前移动设备的访问量早已超越PC端设备,这就意味着用户使用移动设备访问页面的行为越发频繁,这就给web前端开发人员带来了一系列的苦恼,如何才能在不同大小的设备上呈现同样的网页？这是每一个移动web开发者的都会发出的疑问.接下来,本文将讲述自适应网页设计的概念和方法，使网...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}},"next_post":{}}