{"title":"移动设备引发的一像素边框问题","uid":"87f74f29e587dfbe6578c326f4dc0a70","slug":"移动设备引发的一像素边框问题","date":"2018-02-27T01:41:55.000Z","updated":"2022-03-30T02:35:15.678Z","comments":true,"path":"api/articles/移动设备引发的一像素边框问题.json","keywords":null,"cover":"https://image.xposean.top/blogImage/0017.png","content":"<p>熟悉移动web开发的同学一定对<strong>1像素边框问题</strong>不陌生,随着移动端web项目越来越多,要求也越来越高，好多设计师都发现了，你们前端实现的边线为什么这么粗的，根本不是1像素，好吗？<br>一句很普通的<code>border: 1px solid white;</code>在PC端浏览器上会正常显示1px的边框,然而放在移动端时就不是1px的大小了，可以能是2px，也可能是1.5px等,这又是怎么回事呢？咱们继续往下看。</p>\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>讲原因我们得来认识几个关键词:</p>\n<h3 id=\"设备像素比-devicePixelRatio\"><a href=\"#设备像素比-devicePixelRatio\" class=\"headerlink\" title=\"设备像素比 devicePixelRatio\"></a>设备像素比 devicePixelRatio</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>devicePixelRatio是设备上物理像素和设备独立像素(device-independent pixels (dips))的比例。<br>公式表示就是：devicePixelRatio(设备像素比) &#x3D; 物理像素 &#x2F; 设备独立像素(dips)</p></blockquote>\n<p> <strong>物理像素：</strong><br>  物理像素（physical pixel）又称设备像素，设备能控制显示的最小单位，我们可以把这些像素看作成真实存在显示器上一个个的点.</p>\n<p> <strong>设备独立像素:</strong><br>  也叫设备像素，可以认为是计算机坐标系统中的一个点，这个点代表一个可以由程序使用并控制的虚拟像素(比如：CSS 像素,只是在android机中CSS 像素就不叫”CSS 像素”了而是叫”设备独立像素”)，然后由相关系统转换为物理像素。</p>\n<h3 id=\"物理像素与设备独立像素之间的关系\"><a href=\"#物理像素与设备独立像素之间的关系\" class=\"headerlink\" title=\"物理像素与设备独立像素之间的关系\"></a>物理像素与设备独立像素之间的关系</h3><p>在一定的条件下两者它们两者是可以相等的,比如：在PC端浏览器默认情况下（100%，即页面没被缩放），一个物理像素 &#x3D; 一个设备独立像素。而在移动端可就不一样的，因为retina视网膜分辨率,<br>是苹果公司提出来的，可以把更多的像素点压缩至一块屏幕里，从而达到更高的分辨率并提高屏幕显示的细腻程度，目前大部分设备都用到了这种技术。这种分辨率在正常观看距离下足以使人肉眼无法分辨其中的单独像素。也被称为视网膜显示屏。</p>\n<p>得出结论:</p>\n<ul>\n<li>PC端浏览器因为物理像素&#x3D;设备独立像素,所以一般情况下,设备像素比 devicePixelRatio等于1。</li>\n<li>而移动端因为为了更清晰的显示效果,使用了视网膜显示屏,所以物理像素不断地提高,但独立设备像素没有对应的提高,所以导致设备像素比 devicePixelRatio&gt;1。</li>\n</ul>\n<p>也就是说,以iphone8为例，其min-device-pixel-ratio的值为2，如果某元素的下边框的写法是：border: 1px solid color，即当PC端显示的是1px的下边框时，在iphone6中显示的就不是1px，而是2px;</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>经过搜集,解决方案有很多种,经过推敲,有两种方案是比较灵活,适合放到项目中的.</p>\n<h3 id=\"1-伪类-transform-实现\"><a href=\"#1-伪类-transform-实现\" class=\"headerlink\" title=\"1.伪类 + transform 实现\"></a>1.伪类 + transform 实现</h3><pre><code>&lt;style&gt;\n    .scale-1px&#123;\n      position: relative;\n      border:none;\n    &#125;\n    //设备像素比为1.5\n    @media (-webkit-min-device-pixel-ratio: 1.5),(min-device-pixel-ratio: 1.5),(min--moz-device-pixel-ratio: 2),(min-resolution: 2dppx) &#123;\n        .scale-1px:::after &#123;\n            content: &#39;&#39;;\n            position: absolute;\n              bottom: 0;\n              background: #000;\n              width: 100%;\n              height: 1px;\n              -webkit-transform: scaleY(1/1.5);\n              transform: scaleY(0.5);\n        &#125;\n    &#125;\n    //设备像素比为2\n    @media (-webkit-min-device-pixel-ratio: 2),(min-device-pixel-ratio: 2),(min--moz-device-pixel-ratio: 2),(min-resolution: 2dppx) &#123;\n        .scale-1px:::after &#123;\n            content: &#39;&#39;;\n            position: absolute;\n              bottom: 0;\n              background: #000;\n              width: 100%;\n              height: 1px;\n              -webkit-transform: scaleY(0.5);\n              transform: scaleY(0.5);\n        &#125;\n    &#125;\n    //设备像素比为3\n    @media (-webkit-min-device-pixel-ratio: 3),(min-device-pixel-ratio: 3),(min--moz-device-pixel-ratio: 3),(min-resolution: 3dppx) &#123;\n        .scale-1px:::after &#123;\n            content: &#39;&#39;;\n            position: absolute;\n              bottom: 0;\n              background: #000;\n              width: 100%;\n              height: 1px;\n              -webkit-transform: scaleY(1/3);\n              transform: scaleY(0.5);\n        &#125;\n    &#125;\n&lt;/style&gt;\n</code></pre>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点:\"></a>优点:</h4><ul>\n<li>所有场景都能满足</li>\n<li>支持圆角(伪类和本体类都需要加border-radius)</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点:\"></a>缺点:</h4><ul>\n<li>对于已经使用伪类的元素(例如clearfix)，可能需要多层嵌套</li>\n</ul>\n<h3 id=\"2-viewport-rem-实现\"><a href=\"#2-viewport-rem-实现\" class=\"headerlink\" title=\"2.viewport + rem 实现\"></a>2.viewport + rem 实现</h3><p>同时通过设置对应viewport的rem基准值，这种方式就可以像以前一样轻松愉快的写1px了。</p>\n<pre><code>&lt;script&gt;    \n     var viewport = document.querySelector(&quot;meta[name=viewport]&quot;);  \n    //下面是根据设备像素设置viewport\n    if (window.devicePixelRatio == 1.5) &#123;  \n       viewport.setAttribute(&#39;content&#39;, &#39;width=device-width,initial-scale=0.6666666666666667, maximum-scale=0.6666666666666667, minimum-scale=0.6666666666666667, user-scalable=no&#39;);  \n    &#125;  \n    if (window.devicePixelRatio == 2) &#123;  \n       viewport.setAttribute(&#39;content&#39;, &#39;width=device-width,initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no&#39;);  \n    &#125;  \n    if (window.devicePixelRatio == 3) &#123;  \n      viewport.setAttribute(&#39;content&#39;, &#39;width=device-width,initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no&#39;);  \n    &#125;  \n    var docEl = document.documentElement;\n    var fontsize = 10 * (docEl.clientWidth / 320) + &#39;px&#39;;\n    docEl.style.fontSize = fontsize;   \n&lt;/script&gt; \n</code></pre>\n<p>在devicePixelRatio &#x3D; 1.5 时，输出viewport：</p>\n<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=0.6666666666666667, maximum-scale=0.6666666666666667, minimum-scale=0.6666666666666667, user-scalable=no&quot;&gt;\n</code></pre>\n<p>在devicePixelRatio &#x3D; 2 时，输出viewport：</p>\n<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no&quot;&gt;\n</code></pre>\n<p>在devicePixelRatio &#x3D; 3 时，输出viewport：</p>\n<pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no&quot;&gt;\n</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以上部分内容引用<a href=\"https://segmentfault.com/a/1190000007604842\">移动web 1像素边框 瞧瞧大公司是怎么做的</a><br><a href=\"https://juejin.im/entry/584e427361ff4b006cd22c7c\">7 种方法解决移动端 Retina 屏幕 1px 边框问题</a></p></blockquote>\n","text":"熟悉移动web开发的同学一定对1像素边框问题不陌生,随着移动端web项目越来越多,要求也越来越高，好多设计师都发现了，你们前端实现的边线为什么这么粗的，根本不是1像素，好吗？一句很普通的border: 1px solid white;在PC端浏览器上会正常显示1px的边框,然而放...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E5%9B%A0\"><span class=\"toc-text\">原因</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E5%A4%87%E5%83%8F%E7%B4%A0%E6%AF%94-devicePixelRatio\"><span class=\"toc-text\">设备像素比 devicePixelRatio</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%A9%E7%90%86%E5%83%8F%E7%B4%A0%E4%B8%8E%E8%AE%BE%E5%A4%87%E7%8B%AC%E7%AB%8B%E5%83%8F%E7%B4%A0%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">物理像素与设备独立像素之间的关系</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">解决方案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E4%BC%AA%E7%B1%BB-transform-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">1.伪类 + transform 实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BC%98%E7%82%B9\"><span class=\"toc-text\">优点:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">缺点:</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-viewport-rem-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2.viewport + rem 实现</span></a></li></ol></li></ol>","author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}},"mapped":true,"prev_post":{"title":"初探PWA的Service Worker","uid":"5b1e2e9ed1fe26668be4e02b12beafaf","slug":"初探PWA的Service-Worker","date":"2018-04-23T01:48:25.000Z","updated":"2022-03-30T02:35:15.670Z","comments":true,"path":"api/articles/初探PWA的Service-Worker.json","keywords":null,"cover":[],"text":" Progressive Web App, 简称 PWA，是提升 Web App的体验的一种新方法，能给用户原生应用的体验，致力于用前沿的技术开发，让网页使用如同原生App般的体验的一系列方案。 用来自Google Developers的解答Progressive Web App...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}},"next_post":{"title":"浅谈前后端开发中的MVVM开发模式","uid":"08c4771ec9e4c3675f85bffbb0600e94","slug":"浅谈前后端开发中的MVVM开发模式","date":"2018-01-17T02:00:21.000Z","updated":"2022-03-30T02:35:15.675Z","comments":true,"path":"api/articles/浅谈前后端开发中的MVVM开发模式.json","keywords":null,"cover":"https://image.xposean.top/blogImage/0012.png","text":"之前在我的博客也写过关于MVVM模式的简单介绍,但不够详细,也因为对 MVVM 模式一直只是模模糊糊的认识，现在就给大家讲一下详细讲下MVVM模式为何物. 概述MVVM 源自于经典的 Model–View–Controller（MVC）模式（期间还演化出了 Model-View-...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}}}