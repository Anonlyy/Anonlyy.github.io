{"title":"来聊聊优雅的Icon","uid":"6f52155d9c00c8a7ee0e0860b268d01b","slug":"来聊聊优雅的icon","date":"2019-01-24T01:31:38.000Z","updated":"2022-03-30T02:35:15.674Z","comments":true,"path":"api/articles/来聊聊优雅的icon.json","keywords":null,"cover":"https://image.xposean.top/blogImage/004.png","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在做前端后台项目的时候经常会用到很多 <code>icon</code> 图标，刚开始还好，但随着项目的不断迭代，每次修改添加图标会变得很麻烦，而且总觉得不够优雅，就开始琢磨着有啥简单方便的工作流呢？</p>\n<h2 id=\"Icon发展史\"><a href=\"#Icon发展史\" class=\"headerlink\" title=\"Icon发展史\"></a>Icon发展史</h2><h3 id=\"雪碧图\"><a href=\"#雪碧图\" class=\"headerlink\" title=\"雪碧图\"></a>雪碧图</h3><p>在我刚开始实习时，大部分图标都是用 img 来实现的。渐渐发现一个页面的请求资源中图片 img 占了大部分，所以为了优化有了image sprite 就是所谓的雪碧图，就是将多个图片合成一个图片，然后利用 css 的 background-position 定位显示不同的 icon 图标。<br><img src=\"https://i.imgur.com/QrDbmyK.png\"></p>\n<h4 id=\"制作雪碧图\"><a href=\"#制作雪碧图\" class=\"headerlink\" title=\"制作雪碧图\"></a>制作雪碧图</h4><p>1.photoShop手动制作后生成<br>  这种方式是最费时费力的方式,在多数情况并不使用。</p>\n<p>2.通过在线网站或客户端直接生成<br>  如<a href=\"http://alloyteam.github.io/gopng/###\">GO!PNG</a>、<a href=\"https://www.toptal.com/developers/css/sprite-generator\">sprite-generator</a>、<a href=\"http://www.99css.com/cssgaga/\">CssGaga</a><br>3.Gulp实现雪碧图自动合成<br>  安装Gulp插件<code>sprity</code>并配置icon路径,会生成对应的雪碧图和css,详情可查看<a href=\"https://segmentfault.com/a/1190000002910313\">教程</a></p>\n<p>4.Webpack实现<br>  配置webpack环境后,安装雪碧图依赖模块：<a href=\"https://www.npmjs.com/package/webpack-spritesmith\">webpack-spritesmith</a>,并配置即可,此种方式和gulp类似</p>\n<p>雪碧图虽好,但这个也有一个很大的痛点，<strong>维护困难</strong>。每新增一个图标，都需要改动原始图片，还可能不小心出错影响到前面定位好的图片.<br>于是就出现了下一种方式。</p>\n<hr>\n<h3 id=\"Iconfont\"><a href=\"#Iconfont\" class=\"headerlink\" title=\"Iconfont\"></a>Iconfont</h3><p>icon font ，图标字体，也叫字体图标，顾名思义，就是字体做的图标。因为他是矢量图标,能够自由的变化大小，且不会模糊,其次比图片小，加载快，还能够任意改变颜色，所以越来越多的图标都开始使用 icon font</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>每种字体在相同的字都是不一样的，比如 宋体 跟 微软雅黑 ，相同的字 ，由于调用的不同的字体，浏览器显示明显是有区别的。</p>\n<p>在我们还不识字的时候，每个字都是一个图案，所以老师会告诉你哪个图案念什么 ，是什么字，iconfont 同理，我认为 三角形 是 a，那对于我来说，只要是 a ，就应该是个 三角形。</p>\n<p>在电脑上，我给电脑规定 a 的样子是个 三角形，那么当显示 a 的时候，他就显示个三角形。</p>\n<p>当我把网页上的所有图标都对应一个字符的时候，你在代码里输入某个字符，那这个字符就显示你规定的形状，这就是 iconfont 图标。</p>\n<p>把所有的图标都放在一个字体里面，就是一个字体库了，然后按照正常字体库（本来就是正常的字体库）调用就行了。</p>\n<p>也就是说,我们可以理解为每一个字体就是一个矢量图标,只是现在我们这个矢量图标不是<strong>字</strong>,而是一个<strong>图案</strong>.<br><img src=\"https://i.imgur.com/U7aQO1i.gif\"><br><img src=\"https://i.imgur.com/FtkFFNC.png\"></p>\n<p>此外,为了保证兼容性,所以又有<code>.eot</code>、<code>.woff</code>、<code>.ttf</code>、<code>.svg</code>四种格式的字体文件.</p>\n<h4 id=\"iconfont-三种使用方式\"><a href=\"#iconfont-三种使用方式\" class=\"headerlink\" title=\"iconfont 三种使用方式\"></a>iconfont 三种使用方式</h4><p><strong>unicode</strong></p>\n<p>最开始我们使用了unicode的格式，它主要的特点是优势：</p>\n<ol>\n<li>兼容性最好，支持ie6+</li>\n<li>支持按字体的方式去动态调整图标大小，颜色等等</li>\n</ol>\n<p>劣势：</p>\n<ol>\n<li><p>书写不直观，语意不明确</p>\n</li>\n<li><p>在不同的设备浏览器字体的渲染会略有差别</p>\n</li>\n<li><p>不支持多色图标</p>\n<pre><code> &lt;i class=&quot;iconfont&quot;&gt;&amp;#xe604;&lt;/i&gt;\n</code></pre>\n</li>\n</ol>\n<p><img src=\"https://i.imgur.com/gmBCWBw.png\"></p>\n<p><strong>font-class</strong></p>\n<p>相比它也是我们日常开发中最常用到的,相比于unicode语意明确，书写更直观。可以很容易分辨这个icon是什么，但只兼容IE8+。</p>\n<pre><code>&lt;i class=&quot;iconfont icon-xxx&quot;&gt;&lt;/i&gt;\n</code></pre>\n<p><img src=\"https://i.imgur.com/ySVgFUc.png\"></p>\n<p>它的主要原理其实是和 unicode 一样的，它只是多做了一步，将原先<code>&amp;#xe604</code>这种写法换成了<code>.icon-QQ</code>，它在每个 class 的 <code>before</code> 属性中写了<code>unicode</code>,省去了人为写的麻烦。如 </p>\n<pre><code>    .icon-QQ:before &#123; content: &quot;\\e604&quot;; &#125;\n</code></pre>\n<p>相对于<code>unicode</code>它的修改更加的方便与直观。但也有一个大坑，之前楼主一个项目中用到了两组<code>font-class</code> 由于没有做好命名空间，所有的<code>class</code>都是放在<code>.iconfont</code> 命名空间下的，一上线引发了各种雪崩问题，修改了半天，所以使用<code>font-class</code>一定要注意命名空间的问题。</p>\n<p><strong>svg-sprite</strong></p>\n<p>一个普通的SVG图标是这样的:</p>\n<pre><code>&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; x=&quot;0px&quot; y=&quot;0px&quot; width=&quot;24px&quot; height=&quot;24px&quot; viewBox=&quot;0 0 24 24&quot;&gt; \n    &lt;path fill=&quot;#E86C60&quot; d=&quot;M17,0c-1.9,0-3.7,0.8-5,2.1C10.7,0.8,8.9,0,7,0C3.1,0,0,3.1,0,7c0,6.4,10.9,15.4,11.4,15.8 c0.2,0.2,0.4,0.2,0.6,0.2s0.4-0.1,0.6-0.2C13.1,22.4,24,13.4,24,7C24,3.1,20.9,0,17,0z&quot;&gt;&lt;/path&gt;\n&lt;/svg&gt;\n</code></pre>\n<p>我们可以把SVG元素看成一个舞台，而symbol则是舞台上一个一个组装好的元件，这这些一个一个的元件就是我们即将使用的一个一个SVG图标。</p>\n<p>于是,集合了三个SVG图标的SVG元素的代码就是这样的:</p>\n<pre><code>&lt;svg&gt;\n    &lt;symbol id=&quot;icon-share&quot;&gt;\n        &lt;!-- 第1个图标路径形状之类代码 --&gt;\n        &lt;path fill=&quot;#E86C60&quot; d=&quot;M17,0c-1.9,0-3.7,0.8-5,2.1C10.7,0.8,8.9,0,7,0C3.1,0,0,3.1,0,7c0,6.4,10.9,15.4,11.4,15.8 c0.2,0.2,0.4,0.2,0.6,0.2s0.4-0.1,0.6-0.2C13.1,22.4,24,13.4,24,7C24,3.1,20.9,0,17,0z&quot;&gt;&lt;/path&gt;\n    &lt;/symbol&gt;\n    &lt;symbol id=&quot;icon-edit&quot;&gt;\n        &lt;!-- 第2个图标路径形状之类代码 --&gt;\n        &lt;path fill=&quot;#E86C60&quot; d=&quot;M17,0c-1.9,0-3.7,0.8-5,2.1C10.7,0.8,8.9,0,7,0C3.1,0,0,3.1,0,7c0,6.4,10.9,15.4,11.4,15.8 c0.2,0.2,0.4,0.2,0.6,0.2s0.4-0.1,0.6-0.2C13.1,22.4,24,13.4,24,7C24,3.1,20.9,0,17,0z&quot;&gt;&lt;/path&gt;\n    &lt;/symbol&gt;\n    &lt;symbol  id=&quot;icon-top&quot;&gt;\n        &lt;!-- 第3个图标路径形状之类代码 --&gt;\n        &lt;path fill=&quot;#E86C60&quot; d=&quot;M17,0c-1.9,0-3.7,0.8-5,2.1C10.7,0.8,8.9,0,7,0C3.1,0,0,3.1,0,7c0,6.4,10.9,15.4,11.4,15.8 c0.2,0.2,0.4,0.2,0.6,0.2s0.4-0.1,0.6-0.2C13.1,22.4,24,13.4,24,7C24,3.1,20.9,0,17,0z&quot;&gt;&lt;/path&gt;\n    &lt;/symbol&gt;\n&lt;/svg&gt;\n</code></pre>\n<p>但是，<code>&lt;symbol&gt;</code>元素不会被直接显示，大概相当于定义一个模板，然后使用<code>&lt;use&gt;</code>元素引用并进行渲染。</p>\n<p>也就是说上面的svg元素还要加上这样的一句话才能显示:</p>\n<pre><code>&lt;svg&gt;&lt;use xlink:href=&quot;#icon-share&quot; /&gt;&lt;/svg&gt;\n</code></pre>\n<p><img src=\"https://i.imgur.com/uYBI3Mv.png\"></p>\n<p>使用方法：第一步：拷贝项目下面生成的symbol代码,该js包含了所有SVG图标：</p>\n<pre><code>    &lt;script src=&quot;./iconfont.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>第二步：加入通用css代码（引入一次就行）：</p>\n<pre><code>&lt;style type=&quot;text/css&quot;&gt;\n    .icon &#123;\n       width: 1em; height: 1em;\n       vertical-align: -0.15em;\n       fill: currentColor;\n       overflow: hidden;\n    &#125;\n&lt;/style&gt;\n</code></pre>\n<p>第三步：挑选相应图标并获取类名，应用于页面：</p>\n<pre><code>&lt;svg class=&quot;icon&quot; aria-hidden=&quot;true&quot;&gt;\n    &lt;use xlink:href=&quot;#icon-xxx&quot;&gt;&lt;/use&gt;\n&lt;/svg&gt;\n</code></pre>\n<p>SVGIcon的好处:</p>\n<ul>\n<li>支持多色图标了，不再受单色限制。</li>\n<li>支持像字体那样通过font-size,color来调整样式。</li>\n<li>无须像font那样引入多个字体库文件(woff|eot|ttf)</li>\n<li>支持 ie9+</li>\n<li>可利用CSS实现动画。</li>\n<li>减少HTTP请求。</li>\n<li>矢量，缩放不失真</li>\n<li>可以很精细的控制SVG图标的每一部分</li>\n</ul>\n<h4 id=\"如何生成或制作SVG图标\"><a href=\"#如何生成或制作SVG图标\" class=\"headerlink\" title=\"如何生成或制作SVG图标\"></a>如何生成或制作SVG图标</h4><p>生成的方式有很多种:</p>\n<p>1.设计师使用AI(Adobe illustrator)的时候就可以直接生成SVG图标。<br>2.<a href=\"http://iconfont.cn/\">阿里iconfont</a>直接生成SVG，极其方便<br>3.<a href=\"https://icomoon.io/\">IcoMoon</a>导出时可选择SVG和iconfont、PNG三种方式<br>4.<code>webpack</code>的<code>svg-sprite-loader</code>,可将多个svg打包成<code>SVG-sprite</code></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文大概的讲述了一下ICON使用的发展史<br>总的来说还是那句话，适合的才是最好的。根据自己项目的兼容性和业务场景选择自己合适的icon方式,所有方案都没有绝对的优与劣之分，适合自己业务场景，解决自己实际痛点，提高自己开发效率的方案就是好的方案。</p>\n","text":"前言在做前端后台项目的时候经常会用到很多 icon 图标，刚开始还好，但随着项目的不断迭代，每次修改添加图标会变得很麻烦，而且总觉得不够优雅，就开始琢磨着有啥简单方便的工作流呢？ Icon发展史雪碧图在我刚开始实习时，大部分图标都是用 img 来实现的。渐渐发现一个页面的请求资源...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Icon%E5%8F%91%E5%B1%95%E5%8F%B2\"><span class=\"toc-text\">Icon发展史</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9B%AA%E7%A2%A7%E5%9B%BE\"><span class=\"toc-text\">雪碧图</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%B6%E4%BD%9C%E9%9B%AA%E7%A2%A7%E5%9B%BE\"><span class=\"toc-text\">制作雪碧图</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Iconfont\"><span class=\"toc-text\">Iconfont</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#iconfont-%E4%B8%89%E7%A7%8D%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">iconfont 三种使用方式</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E6%88%96%E5%88%B6%E4%BD%9CSVG%E5%9B%BE%E6%A0%87\"><span class=\"toc-text\">如何生成或制作SVG图标</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}},"mapped":true,"prev_post":{"title":"被严重低估的target='_blank'漏洞问题","uid":"a7be6c78ff15adee9cbf442fa41bfbf4","slug":"被严重低估的target-blank-漏洞问题","date":"2019-03-08T15:05:56.000Z","updated":"2022-03-30T02:35:15.680Z","comments":true,"path":"api/articles/被严重低估的target-blank-漏洞问题.json","keywords":null,"cover":[],"text":" 在网页中使用链接时，如果想要让浏览器自动在新的标签页打开指定的地址，通常的做法就是在 a 标签上添加 target等于”_blank” 属性。 然而，就是这个属性，为钓鱼攻击者带来了可乘之机。 parent 与 opener在说 opener 之前，可以先聊聊 &lt;ifra...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"安全","slug":"安全","count":1,"path":"api/categories/安全.json"}],"tags":[{"name":"安全","slug":"安全","count":1,"path":"api/tags/安全.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}},"next_post":{"title":"前端性能优化之图片","uid":"2d7c0bd2df6d999d4495f99378b1f4d4","slug":"前端性能优化之图片","date":"2018-10-27T02:11:26.000Z","updated":"2022-03-30T02:35:15.671Z","comments":true,"path":"api/articles/前端性能优化之图片.json","keywords":null,"cover":"https://image.xposean.top/blogImage/0010.png","text":"前端优化中图片优化必要性在我们前端优化的种种方案中,包括js、html、css文件的打包压缩合并到极致,我们节省的空间至多也就是几十K的大小,但是在图片领域能够优化的空间,往往能够达到几百k到几M的范畴,这对于一个页面而言,优化力度可是极大的.所以在前端优化中,图片的优化是至关重...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}}}