{"title":"浏览器渲染与Virtual DOM相关","uid":"17337bd6a857e628bf33d12d35e24870","slug":"浏览器渲染与Virtual-DOM相关","date":"2019-09-05T07:41:20.000Z","updated":"2022-03-30T02:35:15.676Z","comments":true,"path":"api/articles/浏览器渲染与Virtual-DOM相关.json","keywords":null,"cover":"https://image.xposean.top/blogImage/007.png","content":"<h2 id=\"浏览器如何渲染页面\"><a href=\"#浏览器如何渲染页面\" class=\"headerlink\" title=\"浏览器如何渲染页面\"></a>浏览器如何渲染页面</h2><p>作为一名web前端码农,每天都在接触着浏览器.长此以往我们都会有疑惑,浏览器是怎么解析我们的代码然后渲染的呢？弄明白浏览器的渲染原理,对于我们日常前端开发中的性能优化有重要意义。</p>\n<p>所以今天我们来给大家详细说说浏览器是怎么渲染<code>DOM</code>的。</p>\n<h3 id=\"浏览器渲染大致流程\"><a href=\"#浏览器渲染大致流程\" class=\"headerlink\" title=\"浏览器渲染大致流程\"></a>浏览器渲染大致流程</h3><p>首先,浏览器会通过请求的 <code>URL</code> 进行域名解析，向服务器发起请求,接收资源（<code>HTML</code>、<code>CSS</code>、<code>JS</code>、<code>Images</code>)等等,那么之后浏览器又会进行以下解析:</p>\n<ol>\n<li><p>解析HTML文档,生成<code>DOM Tree</code></p>\n</li>\n<li><p><code>CSS</code> 样式文件加载后，开始解析和构建 <code>CSS Rule Tree</code></p>\n</li>\n<li><p><code>Javascript</code> 脚本文件加载后， 通过 <code>DOM API</code> 和<code> CSSOM API</code> 来操作改动 <code>DOM Tree</code> 和 <code>CSS Rule Tree</code></p>\n</li>\n</ol>\n<p>而解析完以上步骤后, 浏览器会通过<code>DOM Tree</code> 和<code>CSS Rule Tree</code>来构建 <code>Render Tree</code>(<strong>渲染树</strong>)。</p>\n<p>根据渲染树来布局，以计算每个节点的几何信息。</p>\n<p>最后将各个节点绘制到页面上。</p>\n<h3 id=\"1-HTML解析\"><a href=\"#1-HTML解析\" class=\"headerlink\" title=\"1. HTML解析\"></a>1. HTML解析</h3><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width,initial-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Critical Path<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hello <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>web performance<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> students!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>awesome-photo.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>那么解析的<code>DOM</code>树大概就是以下这样</p>\n<p><img src=\"https://image.xposean.top/20210421094331.png\"></p>\n<h3 id=\"2-CSS解析\"><a href=\"#2-CSS解析\" class=\"headerlink\" title=\"2.CSS解析\"></a>2.<code>CSS</code>解析</h3><pre class=\"line-numbers language-CSS\" data-language=\"CSS\"><code class=\"language-CSS\">body &#123; font-size: 16px &#125;\np &#123; font-weight: bold &#125;\nspan &#123; color: red &#125;\np span &#123; display: none &#125;\nimg &#123; float: right &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://image.xposean.top/20210421094405.png\"></p>\n<p><code>CSS Rule Tree</code>会比照着<code>DOM</code>树来对应生成,在这里需要注意的就是<code>CSS</code>匹配DOM的规则。很多人都以为<code>CSS</code>匹配DOM树的速度会很快,其实不然。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>样式系统从最右边的选择符开始向左侧移动来匹配一条规则。样式系统会一直向左匹配选择符直到规则匹配完毕或者由于出错停止匹配.</p></blockquote>\n<p>这里就衍生出一个问题,为什么解析<code>CSS</code>的时候选择<strong>从右往左</strong>呢？</p>\n<p><strong>为了匹配效率。</strong></p>\n<p>所有样式规则极有可能数量很大，而且绝大多数不会匹配到当前的 <code>DOM</code> 元素，所以有一个快速的方法来判断「这个 selector 不匹配当前元素」就是极其重要的。</p>\n<p>如果正向解析，例如<code>「div div p em」</code>，我们首先就要检查当前元素到 <code>HTML</code>的整条路径，找到最上层的 div，再往下找，如果遇到不匹配就必须回到最上层那个 div，往下再去匹配选择器中的第一个 <code>div</code>，回溯若干次才能确定匹配与否，效率很低。</p>\n<p>可以看以下的例子：</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jartto<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span> 111 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span> 222 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span> 333 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>yellow<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span> 444 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jartto1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span> 111 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span> 222 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span> 333 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>red<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span> 555 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-css\" data-language=\"css\"><code class=\"language-css\"><span class=\"token selector\">div > div.jartto p span.yellow</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>yellow<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>对于上述例子，如果按从左到右的方式进行查找：<br>1.先找到所有 <code>div</code> 节点；<br>2.在 div 节点内找到所有的子 <code>div</code> ,并且是 <code>class = “jartto”</code><br>3.然后再依次匹配 <code>p span.yellow</code> 等情况；<br>4.遇到不匹配的情况，就必须回溯到一开始搜索的 <code>div</code> 或者 <code>p</code> 节点，然后去搜索下个节点，重复这样的过程。</p>\n<p>试想一下，如果采用<code>从左至右</code>的方式读取 <code>CSS</code> 规则，那么大多数规则读到最后（最右）才会发现是不匹配的，这样会做费时耗能，最后有很多都是无用的；而如果采取<code>从右向左</code>的方式，那么只要发现最右边选择器不匹配，就可以直接舍弃了，避免了许多无效匹配。</p>\n<p>所以浏览器 <code>CSS</code> 匹配核心算法的规则是以<code>从右向左</code>方式匹配节点的。这样做是为了减少无效匹配次数，从而匹配快、性能更优。</p>\n<p><strong><code>CSS</code>匹配HTML元素是一个相当复杂和有性能问题的事情。所以，你就会在N多地方看到很多人都告诉你，DOM树要小，<code>CSS</code>尽量用id和class，千万不要过渡层叠下去，……</strong></p>\n<h3 id=\"3-合成布局树并渲染\"><a href=\"#3-合成布局树并渲染\" class=\"headerlink\" title=\"3. 合成布局树并渲染\"></a>3. 合成布局树并渲染</h3><p>经运行过<code>Javascript</code>脚本后解析出了最终的<code>DOM Tree</code> 和 <code>CSS Rule Tree</code>, 根据这两者,就能合成我们的**<code>Render  Tree</code>**,网罗网页上所有可见的 <code>DOM</code> 内容，以及每个节点的所有 <code>CSSOM</code> 样式信息。</p>\n<p>为构建渲染树，浏览器大体上完成了下列工作：</p>\n<ol>\n<li>从<code> DOM</code> 树的根节点开始遍历每个可见节点。<ul>\n<li>某些节点不可见（例如脚本标记、元标记等），因为它们不会体现在渲染输出中，所以会被忽略。</li>\n<li>某些节点通过<code> CSS</code> 隐藏，因此在渲染树中也会被忽略，例如，上例中的 span 节点—不会出现在渲染树中，—因为有一个显式规则在该节点上设置了“<code>display: none</code>”属性。</li>\n</ul>\n</li>\n<li>对于每个可见节点，为其找到适配的 <code>CSSOM</code> 规则并应用它们。</li>\n<li>渲染可见节点，连同其内容和计算的样式。</li>\n</ol>\n<hr>\n<h2 id=\"Virtual-DOM\"><a href=\"#Virtual-DOM\" class=\"headerlink\" title=\"Virtual DOM\"></a>Virtual DOM</h2><p>​    大部分前端开发者对<code>Virtual DOM</code>这个词都很熟悉了,简单来讲，<code>Virtual DOM</code>就是在数据和真实 <code>DOM</code> 之间建立了一层缓冲层。当数据变化触发渲染后，并不直接更新到<code>DOM</code>上，而是先生成 <code>Virtual DOM</code>，与上一次渲染得到的 <code>Virtual DOM</code> 进行比对，在渲染得到的 <code>Virtual DOM</code> 上发现变化，然后将变化的地方更新到真实 <code>DOM</code> 上。 </p>\n<h3 id=\"为什么说Virtual-DOM快\"><a href=\"#为什么说Virtual-DOM快\" class=\"headerlink\" title=\"为什么说Virtual DOM快?\"></a>为什么说Virtual DOM快?</h3><p>**1）DOM结构复杂,操作很慢 **</p>\n<p>我们在控制台输入</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">''</span> \n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> div<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    str <span class=\"token operator\">=</span> str <span class=\"token operator\">+</span> key <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span>\n<span class=\"token punctuation\">&#125;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以很容易发现,我们的一个空div对象,他的属性就有几百个,所以说<code>DOM</code>的操作慢是可以理解的。不是浏览器不想好好实现DOM，而是<code>DOM</code>设计得太复杂。</p>\n<p><strong>2）JS计算很快</strong></p>\n<p><a href=\"https://julialang.org/benchmarks/\">https://julialang.org/benchmarks/</a></p>\n<p>Julia有一个Benchmark，<a href=\"https://link.zhihu.com/?target=http://julialang.org/benchmarks/\">Julia Benchmarks</a>， 可以看到<code>Javascript</code>跟<code>C</code>语言很接近了，也就几倍的差距，跟Java基本也是一个量级。 这就说明，单纯的<code>Javascript</code>运行起来其实速度是很快的。 </p>\n<p>而相对于<code>DOM</code>,我们原生的<code>JavaScript</code>对象处理起来则会更快更简单.</p>\n<p>我们通过<code>JavaScript</code>,可以很容易的用<code>JavaScript</code>对象表示出来.</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> olE <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">tagName</span><span class=\"token operator\">:</span> <span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 标签名</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 属性用对象存储键值对</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'ul-list'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'list'</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\">// 子节点</span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">tagName</span><span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Item 1\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">tagName</span><span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Item 2\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">tagName</span><span class=\"token operator\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Item 3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>对应的HTML写法:</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>ol-list<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>item<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>Item 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>item<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>Item 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>item<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>Item 3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>那么,既然我们可以用<code>javascript</code>来表示<code>DOM</code>，那么代表我们可以用<code>JavaScript</code>来构造我们的真实<code>DOM</code>树,当我们的<code>DOM</code>树需要更新了,那我们先渲染更改这个<code>JavaScript</code>构造的<code>Virtual DOM</code>树,再更新到真实DOM树上。</p>\n<p> 所以<code>Virtual DOM</code>算法就是：</p>\n<p>一开始先用 <code>JavaScript</code> 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文</p>\n<p>档当中。当状态变更时，重新构造一棵新的对象树。然后用新的树和旧的树进行比较两个树的差异。</p>\n<p>然后把差异更新到旧的树上，最后再把整个变更写入真实 <code>DOM</code>。 </p>\n<h3 id=\"简单Virtual-DOM-算法实现\"><a href=\"#简单Virtual-DOM-算法实现\" class=\"headerlink\" title=\"简单Virtual DOM 算法实现\"></a>简单Virtual DOM 算法实现</h3><p><strong>步骤一：用<code>JS</code>对象模拟<code>DOM</code>树,并构建</strong></p>\n<p>用 <code>JavaScript</code> 来表示一个 <code>DOM</code> 节点是很简单的事情，你只需要记录它的节点类型、属性，还有子节点： </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 创建虚拟DOM函数</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Element</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tagName<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">=</span> tagName <span class=\"token comment\">// 标签名</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> props <span class=\"token comment\">// 对应属性（如ID、Class）</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children <span class=\"token comment\">// 子元素</span>\n<span class=\"token punctuation\">&#125;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tagName<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> children</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Element</span><span class=\"token punctuation\">(</span>tagName<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>实际应用如下:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./element'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 普通ul和li对象就可以表示为这样</span>\n<span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Item 1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Item 2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Item 3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>现在<code>ul</code>只是一个 JavaScript 对象表示的 DOM 结构，页面上并没有这个结构。我们可以根据这个<code>ul</code>构建真正的<code>&lt;ul&gt;</code>元素： </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 构建真实DOM函数</span>\n<span class=\"token class-name\">Element</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tagName<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 根据tagName构建</span>\n  <span class=\"token keyword\">var</span> props <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> propName <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 设置节点的DOM属性</span>\n    <span class=\"token keyword\">var</span> propValue <span class=\"token operator\">=</span> props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span>\n    el<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">,</span> propValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">var</span> children <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  children<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> childEl <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>child <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Element</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">?</span> child<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果子节点也是虚拟DOM，递归构建DOM节点</span>\n      <span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果字符串，只构建文本节点</span>\n    el<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>childEl<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> el\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>我们的<code>render</code>方法会根据<code>tagName</code>去构建一个真实的<code>DOM</code>节点,设置节点属性,再递归到子元素构建:</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ulRoot <span class=\"token operator\">=</span> ul<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 将js构建的dom对象传给render构建</span>\ndocument<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>ulRoot<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 真实的DOM对象塞入body</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这样我们body中就有了ul和li的DOM元素了</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>list<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>item<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>Item 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>item<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>Item 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>item<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>Item 3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>步骤二：比较两棵虚拟DOM树的差异</strong></p>\n<p>在这里我们假设对我们修改了某个状态或者某个数据,这就会产生新的虚拟DOM</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 新DOM</span>\n<span class=\"token keyword\">var</span> ol <span class=\"token operator\">=</span> <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ol'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'ol-list'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'ol-item'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Item 1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'ol-item'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Item 2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'ol-item'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Item 3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'ol-item'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Item 4'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 旧DOM</span>\n<span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Item 1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Item 3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">el</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'item'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Item 2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>那么我们会和先和,刚刚上一次生成的虚拟<code>DOM</code>树进行比对.</p>\n<p>我们应该都很清楚,<code>Virtual DOM</code>算法的核心部分,就在比较差异这一部分,也就是所谓的 <code>diff</code>算法。</p>\n<p>因为很少出现跨层级的移动。</p>\n<p><code>diff</code>算法一般来说,都是同一层级比对同一层级的</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/328599/201704/328599-20170418103314493-66729150.png\"></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> patch <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">'REPLACE'</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 替换</span>\n    <span class=\"token string-property property\">'REORDER'</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 新增、删除、移动</span>\n    <span class=\"token string-property property\">'PROPS'</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 属性更改</span>\n    <span class=\"token string-property property\">'TEXT'</span> <span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token comment\">// 文本内容更改</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例如，上面的<code>div</code>和新的<code>div</code>有差异，当前的标记是0，那么：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 用数组存储新旧节点的不同</span>\npatches <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">// 每个数组表示一个元素的差异</span>\n    <span class=\"token punctuation\">[</span> \n        <span class=\"token punctuation\">&#123;</span>difference<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> \n    \t<span class=\"token punctuation\">&#123;</span>difference<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">&#123;</span>difference<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> \n    \t<span class=\"token punctuation\">&#123;</span>difference<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">]</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">patches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">REPALCE</span><span class=\"token punctuation\">,</span>\n  \t<span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> newNode <span class=\"token comment\">// el('section', props, children)</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">PROPS</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"container\"</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>   \n  <span class=\"token punctuation\">&#123;</span>\n  \t<span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">REORDER</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">moves</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">item</span><span class=\"token operator\">:</span> item<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 保留的节点</span>\n          <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 该节点被删除</span>\n          <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">index</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">item</span><span class=\"token operator\">:</span> item<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 保留的节点</span>\n      <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n如果是文本节点内容更改，就记录下：\npatches<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">TEXT</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">\"我是新修改的文本内容\"</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 详细算法查看diff.js https://blog.xposean.top/file/virtualDom/diff.js</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>每种差异都会有不同的对比方式,通过比对后会将差异记录下来,应用到真实DOM上,并把最近最新的虚拟DOM树保存下来,以便下次比对使用。</p>\n<p><strong>步骤三：把差异应用到真正的DOM树上</strong></p>\n<p>通过比对后,我们已经知道了,差异的节点是哪些,我们可以方便对真实DOM做最小化的修改。 </p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 详情看patch.js https://blog.xposean.top/file/virtualDom/patch.js</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"发现问题\"><a href=\"#发现问题\" class=\"headerlink\" title=\"发现问题\"></a>发现问题</h3><p>到这里我们发现一个问题,不是说 <code>Virtual DOM</code>更快吗? 可是最终你还是要进行DOM操作呀?那意义何在？还不如一开始我们就直接进行DOM操作来的方便。</p>\n<p>所以到这里我们要对<code>Virtual DOM</code> 有一个正确的认识</p>\n<p><a href=\"https://www.zhihu.com/question/31809713/answer/53544875\">网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？</a></p>\n<p><a href=\"http://chrisharrington.github.io/demos/performance/\">http://chrisharrington.github.io/demos/performance/</a></p>\n<p><code>Virtual DOM</code>的优点:</p>\n<ol>\n<li><p>最优更改, 保证性能下限</p>\n<p><code>Virtual DOM</code>的算法能够向你保证的就是,每一次的<code>DOM</code>操作我都能达到算法上的理论最优,而如果是你自己去操作<code>DOM</code>,这并不能保证。</p>\n</li>\n<li><p>开发模式的更改</p>\n<p><strong>为了让开发者把精力集中在操作数据，而非接管 DOM 操作</strong>。<code>Virtual DOM</code>能让我们在实际开发过程中,不需要去理会复杂的DOM结构,而只需理会绑定DOM结构的状态和数据即可,这从开发上来说 就是一个很大的优势。</p>\n</li>\n<li><p>跨平台</p>\n<p>因为 <code>Virtual DOM</code> 本质上是<code>JS</code>的对象, 就可以比较方便的实现跨平台操作, 例如<code>SSR</code>、<code>uniapp</code>等</p>\n</li>\n</ol>\n","text":"浏览器如何渲染页面作为一名web前端码农,每天都在接触着浏览器.长此以往我们都会有疑惑,浏览器是怎么解析我们的代码然后渲染的呢？弄明白浏览器的渲染原理,对于我们日常前端开发中的性能优化有重要意义。 所以今天我们来给大家详细说说浏览器是怎么渲染DOM的。 浏览器渲染大致流程首先,浏...","link":"","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"前端","slug":"前端","count":13,"path":"api/categories/前端.json"}],"tags":[{"name":"前端","slug":"前端","count":13,"path":"api/tags/前端.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2\"><span class=\"toc-text\">浏览器如何渲染页面</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%A4%A7%E8%87%B4%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">浏览器渲染大致流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-HTML%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">1. HTML解析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-CSS%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">2.CSS解析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%90%88%E6%88%90%E5%B8%83%E5%B1%80%E6%A0%91%E5%B9%B6%E6%B8%B2%E6%9F%93\"><span class=\"toc-text\">3. 合成布局树并渲染</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Virtual-DOM\"><span class=\"toc-text\">Virtual DOM</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4Virtual-DOM%E5%BF%AB\"><span class=\"toc-text\">为什么说Virtual DOM快?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95Virtual-DOM-%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">简单Virtual DOM 算法实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%91%E7%8E%B0%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">发现问题</span></a></li></ol></li></ol>","author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}},"mapped":true,"prev_post":{"title":"教你如何做一个表白神器","uid":"0ea28cef92d6f8f6e9cc5aa8158bb914","slug":"教你如何做一个表白神器","date":"2020-05-09T08:49:49.000Z","updated":"2022-03-30T02:35:15.672Z","comments":true,"path":"api/articles/教你如何做一个表白神器.json","keywords":null,"cover":"https://image.xposean.top/blogImage/002.png","text":" 初衷前段时间发现微信群里有人天天准时准点的在发咨询或者消息, 身为程序员的我一眼就发现这是机器人所为, 于是萌生了利用机器人每天向女票定时发消息的想法, 那么开始我的折腾之旅吧。 关于微信机器人的开源项目, github一搜也是有一大堆了, 身为前端, 自然是拥抱node啦, ...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"日常","slug":"日常","count":1,"path":"api/categories/日常.json"}],"tags":[{"name":"日常","slug":"日常","count":1,"path":"api/tags/日常.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}},"next_post":{"title":"被严重低估的target='_blank'漏洞问题","uid":"a7be6c78ff15adee9cbf442fa41bfbf4","slug":"被严重低估的target-blank-漏洞问题","date":"2019-03-08T15:05:56.000Z","updated":"2022-03-30T02:35:15.680Z","comments":true,"path":"api/articles/被严重低估的target-blank-漏洞问题.json","keywords":null,"cover":[],"text":" 在网页中使用链接时，如果想要让浏览器自动在新的标签页打开指定的地址，通常的做法就是在 a 标签上添加 target等于”_blank” 属性。 然而，就是这个属性，为钓鱼攻击者带来了可乘之机。 parent 与 opener在说 opener 之前，可以先聊聊 &lt;ifra...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"安全","slug":"安全","count":1,"path":"api/categories/安全.json"}],"tags":[{"name":"安全","slug":"安全","count":1,"path":"api/tags/安全.json"}],"author":{"name":"Xposean","slug":"blog-author","avatar":"https://cdn.xposean.top/smallStack/dist/img/avatar.6354a35.png","link":"/","description":"做一个刚刚好的前端仔","socials":{"github":"https://github.com/Anonlyy","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.im/user/1451011078620568","customs":{"site":{"icon":"/image/site_logo.png","link":"https://www.xposean.top"}}}}}}